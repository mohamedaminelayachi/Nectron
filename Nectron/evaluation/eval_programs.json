[
    {
        "description": "It takes in two integers x and y and returns their sum.",
        "verbosity": "low",
        "function_name": "calculate_sum",
        "c_implementation": "int calculate_sum(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int calculate_sum(int x, int y) {\n    return x - y;\n}",
            "int calculate_sum(int x, int y) {\n    return x / y + 1;\n}",
            "int calculate_sum(int x, int y) {\n    return x * y;\n}"
        ]
    },
    {
        "description": "This program is designed to accept two integer inputs, which are named num1 and num2. It then proceeds to calculate the result of subtracting num2 from num1 and returns this final difference as the output.",
        "verbosity": "high",
        "function_name": "calculate_difference",
        "c_implementation": "int calculate_difference(int num1, int num2) {\n    return num1 - num2;\n}",
        "c_corrupted_implementation": [
            "int calculate_difference(int num1, int num2) {\n    return num1 + num2;\n}",
            "int calculate_difference(int num1, int num2) {\n    return num1 - num2 + num1;\n}",
            "int calculate_difference(int num1, int num2) {\n    return num1 * num2 / num1;\n}"
        ]
    },
    {
        "description": "Given two integer values, this function computes their product.",
        "verbosity": "medium",
        "function_name": "compute_product",
        "c_implementation": "int compute_product(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int compute_product(int a, int b) {\n    return a / b;\n}",
            "int compute_product(int a, int b) {\n    return a * a + 1 - b;\n}",
            "int compute_product(int a, int b) {\n    return 2 * a * b;\n}"
        ]
    },
    {
        "description": "Calculates the result of an integer division between two numbers, a and b.",
        "verbosity": "low",
        "function_name": "integer_division",
        "c_implementation": "int integer_division(int a, int b) {\n    return a / b;\n}",
        "c_corrupted_implementation": [
            "int integer_division(int a, int b) {\n    return a * b;\n}",
            "int integer_division(int a, int b) {\n    return a + b;\n}",
            "int integer_division(int a, int b) {\n    return a - b - 1;\n}"
        ]
    },
    {
        "description": "The function's primary role is to determine the remainder of a division operation between two integers. It takes a dividend and a divisor, performs the division, and then returns the integer remainder, which is also known as the modulo.",
        "verbosity": "high",
        "function_name": "get_remainder",
        "c_implementation": "int get_remainder(int dividend, int divisor) {\n    return dividend % divisor;\n}",
        "c_corrupted_implementation": [
            "int get_remainder(int dividend, int divisor) {\n    return dividend / divisor;\n}",
            "int get_remainder(int dividend, int divisor) {\n    return dividend + divisor / 2;\n}",
            "int get_remainder(int dividend, int divisor) {\n    return dividend * divisor / divisor + dividend;\n}"
        ]
    },
    {
        "description": "This program will perform a bitwise AND operation on two integer inputs and return the result.",
        "verbosity": "medium",
        "function_name": "bitwise_and",
        "c_implementation": "int bitwise_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int bitwise_and(int a, int b) {\n    return a | b;\n}",
            "int bitwise_and(int a, int b) {\n    return a + b + 2;\n}",
            "int bitwise_and(int a, int b) {\n    return a * b / (a + b);\n}"
        ]
    },
    {
        "description": "Computes the bitwise OR of two integers, x and y.",
        "verbosity": "low",
        "function_name": "bitwise_or",
        "c_implementation": "int bitwise_or(int x, int y) {\n    return x | y;\n}",
        "c_corrupted_implementation": [
            "int bitwise_or(int x, int y) {\n    return x & y;\n}",
            "int bitwise_or(int x, int y) {\n    return x * y * x;\n}",
            "int bitwise_or(int x, int y) {\n    return y * y;\n}"
        ]
    },
    {
        "description": "This function is responsible for flipping all the bits of a given integer. It takes a single integer input, let's call it 'val', and applies the bitwise NOT operation to it. The resulting integer, where every 0 bit is a 1 and every 1 bit is a 0, is then returned.",
        "verbosity": "high",
        "function_name": "bitwise_not",
        "c_implementation": "int bitwise_not(int val) {\n    return ~val;\n}",
        "c_corrupted_implementation": [
            "int bitwise_not(int val) {\n    return val + 1;\n}",
            "int bitwise_not(int val) {\n    return val / val;\n}",
            "int bitwise_not(int val) {\n    return val * val * val;\n}"
        ]
    },
    {
        "description": "Performs a bitwise left shift on an integer 'a' by 'b' positions.",
        "verbosity": "low",
        "function_name": "left_shift",
        "c_implementation": "int left_shift(int a, int b) {\n    return a << b;\n}",
        "c_corrupted_implementation": [
            "int left_shift(int a, int b) {\n    return a >> b;\n}",
            "int left_shift(int a, int b) {\n    return a + b / 2;\n}",
            "int left_shift(int a, int b) {\n    return a * a - b * a;\n}"
        ]
    },
    {
        "description": "The function takes an integer and a shift amount. It will perform a bitwise right shift on the integer by the specified number of bits.",
        "verbosity": "medium",
        "function_name": "right_shift",
        "c_implementation": "int right_shift(int num, int amount) {\n    return num >> amount;\n}",
        "c_corrupted_implementation": [
            "int right_shift(int num, int amount) {\n    return num << amount;\n}",
            "int right_shift(int num, int amount) {\n    return num / amount + 1;\n}",
            "int right_shift(int num, int amount) {\n    return amount * amount + num;\n}"
        ]
    },
    {
        "description": "This program's purpose is to access the value that an integer pointer is referencing. It takes a single argument, a pointer to an integer, and returns the integer value stored at that memory address.",
        "verbosity": "medium",
        "function_name": "dereference_pointer",
        "c_implementation": "int dereference_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int dereference_pointer(int* p) {\n    return (int)p;\n}",
            "int dereference_pointer(int* p) {\n    return (int)p + 1;\n}",
            "int dereference_pointer(int* p) {\n    return (int)p / 2;\n}"
        ]
    },
    {
        "description": "Given an integer variable, this function returns its memory address.",
        "verbosity": "low",
        "function_name": "get_address",
        "c_implementation": "int* get_address(int* var) {\n    return var;\n}",
        "c_corrupted_implementation": [
            "int* get_address(int* var) {\n    return NULL;\n}",
            "int* get_address(int* var) {\n    return &&var;\n}",
            "int* get_address(int* var) {\n    return 0;\n}"
        ]
    },
    {
        "description": "This function takes two integer pointers, ptr1 and ptr2, and calculates the sum of the values they point to.",
        "verbosity": "medium",
        "function_name": "sum_pointed_values",
        "c_implementation": "int sum_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 + *ptr2;\n}",
        "c_corrupted_implementation": [
            "int sum_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 - *ptr2;\n}",
            "int sum_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 * *ptr2 + 1;\n}",
            "int sum_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 + 1 / *ptr2;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer 'p', this function adds 10 to the value at the address 'p' points to.",
        "verbosity": "low",
        "function_name": "add_ten_to_pointed_value",
        "c_implementation": "void add_ten_to_pointed_value(int* p) {\n    *p = *p + 10;\n}",
        "c_corrupted_implementation": [
            "void add_ten_to_pointed_value(int* p) {\n    *p = 7;\n}",
            "void add_ten_to_pointed_value(int* p) {\n    *p = 0;\n}",
            "void add_ten_to_pointed_value(int* p) {\n    *p = 1;\n}"
        ]
    },
    {
        "description": "This program takes three integer inputs: `a`, `b`, and `c`. It calculates the expression (a + b) * c by first summing `a` and `b`, and then multiplying that result by `c`.",
        "verbosity": "medium",
        "function_name": "calculate_sum_and_multiply",
        "c_implementation": "int calculate_sum_and_multiply(int a, int b, int c) {\n    return (a + b) * c;\n}",
        "c_corrupted_implementation": [
            "int calculate_sum_and_multiply(int a, int b, int c) {\n    return a + (b * c);\n}",
            "int calculate_sum_and_multiply(int a, int b, int c) {\n    return a - (b * c);\n}",
            "int calculate_sum_and_multiply(int a, int b, int c) {\n    return a * (b * c);\n}"
        ]
    },
    {
        "description": "The function is designed to compute the average of three integers. It takes 'x', 'y', and 'z' as input, calculates their sum, and then performs an integer division by 3 to find the average. The final integer result is returned. For example, if the inputs are 10, 20, and 30, the sum is 60 and the returned average is 20.",
        "verbosity": "high",
        "function_name": "average_of_three",
        "c_implementation": "int average_of_three(int x, int y, int z) {\n    return (x + y + z) / 3;\n}",
        "c_corrupted_implementation": [
            "int average_of_three(int x, int y, int z) {\n    return (x + y / z);\n}",
            "int average_of_three(int x, int y, int z) {\n    return (x * y + z) * 2;\n}",
            "int average_of_three(int x, int y, int z) {\n    return (x + y - z) * 5;\n}"
        ]
    },
    {
        "description": "Swaps the values of two integers, `val1` and `val2`, using a temporary variable.",
        "verbosity": "low",
        "function_name": "swap_integers",
        "c_implementation": "void swap_integers(int* val1, int* val2) {\n    int temp = *val1;\n    *val1 = *val2;\n    *val2 = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_integers(int* val1, int* val2) {\n    int temp = *val1;\n    *val1 = *val2;\n    *val2 = *val1;\n}",
            "void swap_integers(int* val1, int* val2) {\n    int temp = *val1;\n    *val1 = *val1;\n    *val2 = *val2;\n}",
            "void swap_integers(int* val1, int* val2) {\n    int temp = *val1 + *val2;\n    *val1 = *val2;\n    *val2 = *val1;\n}"
        ]
    },
    {
        "description": "This program takes two integer pointers, `p1` and `p2`. It's designed to swap the integer values that are stored in the memory locations these pointers point to.",
        "verbosity": "medium",
        "function_name": "swap_via_pointers",
        "c_implementation": "void swap_via_pointers(int* p1, int* p2) {\n    int temp = *p1;\n    *p1 = *p2;\n    *p2 = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_via_pointers(int* p1, int* p2) {\n    *p1 = *p2;\n}",
            "void swap_via_pointers(int* p1, int* p2) {\n    *p1 = *p1;\n}",
            "void swap_via_pointers(int* p1, int* p2) {\n    *p1 = *p2 + *p1;\n}"
        ]
    },
    {
        "description": "Calculates the sum of squares for two integers, `a` and `b`, returning the result of (a*a) + (b*b).",
        "verbosity": "low",
        "function_name": "sum_of_squares",
        "c_implementation": "int sum_of_squares(int a, int b) {\n    return (a * a) + (b * b);\n}",
        "c_corrupted_implementation": [
            "int sum_of_squares(int a, int b) {\n    return (a + a) + (b + b);\n}",
            "int sum_of_squares(int a, int b) {\n    return (a - a) / (b * b);\n}",
            "int sum_of_squares(int a, int b) {\n    return (a + 2) + (b + 2);\n}"
        ]
    },
    {
        "description": "The program is designed to take a pointer to an integer 'ptr'. Its function is to modify the value stored at the memory location 'ptr' points to. It does this by multiplying the current value by 5, and then updates the value at that memory location with the result of the multiplication.",
        "verbosity": "high",
        "function_name": "multiply_pointed_value_by_five",
        "c_implementation": "void multiply_pointed_value_by_five(int* ptr) {\n    *ptr = *ptr * 5;\n}",
        "c_corrupted_implementation": [
            "void multiply_pointed_value_by_five(int* ptr) {\n    *ptr = *ptr + 5;\n}",
            "void multiply_pointed_value_by_five(int* ptr) {\n    *ptr = *ptr;\n}",
            "void multiply_pointed_value_by_five(int* ptr) {\n    *ptr = *ptr * 2;\n}"
        ]
    },
    {
        "description": "Takes two integers and returns their product.",
        "verbosity": "low",
        "function_name": "get_product",
        "c_implementation": "int get_product(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int get_product(int a, int b) {\n    return a + b;\n}",
            "int get_product(int a, int b) {\n    return a / b;\n}",
            "int get_product(int a, int b) {\n    return a - b + b - a;\n}"
        ]
    },
    {
        "description": "This program takes two integer values, an 'initial_value' and a 'subtrahend'. It calculates the result of subtracting the 'subtrahend' from the 'initial_value' and returns this difference. For instance, if 'initial_value' is 100 and 'subtrahend' is 42, it will return 58.",
        "verbosity": "high",
        "function_name": "perform_subtraction",
        "c_implementation": "int perform_subtraction(int initial_value, int subtrahend) {\n    return initial_value - subtrahend;\n}",
        "c_corrupted_implementation": [
            "int perform_subtraction(int initial_value, int subtrahend) {\n    return subtrahend - initial_value;\n}",
            "int perform_subtraction(int initial_value, int subtrahend) {\n    return subtrahend + initial_value * 5;\n}",
            "int perform_subtraction(int initial_value, int subtrahend) {\n    return subtrahend * initial_value / 2;\n}"
        ]
    },
    {
        "description": "Computes the bitwise XOR of two provided integers.",
        "verbosity": "medium",
        "function_name": "bitwise_xor",
        "c_implementation": "int bitwise_xor(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int bitwise_xor(int a, int b) {\n    return a & b;\n}",
            "int bitwise_xor(int a, int b) {\n    return a * b;\n}",
            "int bitwise_xor(int a, int b) {\n    return a + b;\n}"
        ]
    },
    {
        "description": "The function takes a pointer to an integer `ptr` and an integer `value`. It updates the memory location that `ptr` points to with the new `value`.",
        "verbosity": "medium",
        "function_name": "update_pointer_value",
        "c_implementation": "void update_pointer_value(int* ptr, int value) {\n    *ptr = value;\n}",
        "c_corrupted_implementation": [
            "void update_pointer_value(int* ptr, int value) {\n    ptr = &value;\n}",
            "void update_pointer_value(int* ptr, int value) {\n    ptr = &ptr;\n}",
            "void update_pointer_value(int* ptr, int value) {\n    ptr = NULL;\n}"
        ]
    },
    {
        "description": "This program's job is to swap the values held by two integer variables, let's call them `first_num` and `second_num`. It accomplishes this by using a third, helper variable (a temporary) to hold one of the values during the exchange process to prevent data loss.",
        "verbosity": "high",
        "function_name": "swap_with_temp",
        "c_implementation": "void swap_with_temp(int* first_num, int* second_num) {\n    int temp = *first_num;\n    *first_num = *second_num;\n    *second_num = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_with_temp(int* first_num, int* second_num) {\n    *first_num = *second_num;\n}",
            "void swap_with_temp(int* first_num, int* second_num) {\n    *first_num = *second_num + 2;\n}",
            "void swap_with_temp(int* first_num, int* second_num) {\n    *second_num = *first_num + 1;\n}"
        ]
    },
    {
        "description": "Returns the value of an integer pointed to by pointer p.",
        "verbosity": "low",
        "function_name": "get_pointed_value",
        "c_implementation": "int get_pointed_value(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_pointed_value(int* p) {\n    return (int)p;\n}",
            "int get_pointed_value(int* p) {\n    return (int)p + 1;\n}",
            "int get_pointed_value(int* p) {\n    return (int)p - 0;\n}"
        ]
    },
    {
        "description": "The primary function of this program is to perform an addition operation. It accepts two integers, let's call them `x` and `y`, as its parameters. The program will then calculate the result of `x + y` and output this final integer value. For instance, if `x` is 5 and `y` is 3, the program will return 8.",
        "verbosity": "high",
        "function_name": "perform_addition",
        "c_implementation": "int perform_addition(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int perform_addition(int x, int y) {\n    return x * y;\n}",
            "int perform_addition(int x, int y) {\n    return x - y;\n}",
            "int perform_addition(int x, int y) {\n    return x + y;\n}"
        ]
    },
    {
        "description": "Calculates the bitwise AND of two input integers.",
        "verbosity": "medium",
        "function_name": "get_bitwise_and",
        "c_implementation": "int get_bitwise_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int get_bitwise_and(int a, int b) {\n    return a ^ b;\n}",
            "int get_bitwise_and(int a, int b) {\n    return a + b;\n}",
            "int get_bitwise_and(int a, int b) {\n    return a - b;\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, the program returns the result of `(x * y) + y`.",
        "verbosity": "low",
        "function_name": "multiply_and_add",
        "c_implementation": "int multiply_and_add(int x, int y) {\n    return (x * y) + y;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_add(int x, int y) {\n    return x * (y + y);\n}",
            "int multiply_and_add(int x, int y) {\n    return x * (x + y);\n}",
            "int multiply_and_add(int x, int y) {\n    return x * y + 1;\n}"
        ]
    },
    {
        "description": "The function takes two pointers to integers, `ptr_a` and `ptr_b`. It retrieves the values at their respective memory locations and returns the product of these two values.",
        "verbosity": "medium",
        "function_name": "product_of_pointed_values",
        "c_implementation": "int product_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return (*ptr_a) * (*ptr_b);\n}",
        "c_corrupted_implementation": [
            "int product_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return (*ptr_a) + (*ptr_b);\n}",
            "int product_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return (*ptr_a) / (*ptr_b);\n}",
            "int product_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return 1 + (*ptr_a) - (*ptr_b);\n}"
        ]
    },
    {
        "description": "Given pointers `p_x` and `p_y`, swap the integer values they point to.",
        "verbosity": "low",
        "function_name": "swap_int_pointer_values",
        "c_implementation": "void swap_int_pointer_values(int* p_x, int* p_y) {\n    int temp = *p_x;\n    *p_x = *p_y;\n    *p_y = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_int_pointer_values(int* p_x, int* p_y) {\n    *p_x = *p_y;\n    *p_y = *p_x;\n}",
            "void swap_int_pointer_values(int* p_x, int* p_y) {\n    *p_x = *p_y - 2;\n    *p_y = *p_x + 2;\n}",
            "void swap_int_pointer_values(int* p_x, int* p_y) {\n    *p_x = *p_x;\n    *p_y = *p_y;\n}"
        ]
    },
    {
        "description": "The function is built to compute a simple linear equation `y = m*x + c`. It accepts three integers as arguments: `m`, `x`, and `c`. The function will first multiply `m` by `x`, then add `c` to the product. The final result of this calculation is returned.",
        "verbosity": "high",
        "function_name": "linear_equation",
        "c_implementation": "int linear_equation(int m, int x, int c) {\n    return (m * x) + c;\n}",
        "c_corrupted_implementation": [
            "int linear_equation(int m, int x, int c) {\n    return m * (x + c);\n}",
            "int linear_equation(int m, int x, int c) {\n    return 2 * (x + 1);\n}",
            "int linear_equation(int m, int x, int c) {\n    return c + x;\n}"
        ]
    },
    {
        "description": "This program takes three integers, `x`, `y`, and `z`, and returns their sum.",
        "verbosity": "medium",
        "function_name": "sum_of_three",
        "c_implementation": "int sum_of_three(int x, int y, int z) {\n    return x + y + z;\n}",
        "c_corrupted_implementation": [
            "int sum_of_three(int x, int y, int z) {\n    return x + y - z;\n}",
            "int sum_of_three(int x, int y, int z) {\n    return x + x;\n}",
            "int sum_of_three(int x, int y, int z) {\n    return x - z;\n}"
        ]
    },
    {
        "description": "This program returns the memory address of an integer `x`.",
        "verbosity": "low",
        "function_name": "get_int_address",
        "c_implementation": "int* get_int_address(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* get_int_address(int* x) {\n    return x + 1;\n}",
            "int* get_int_address(int* x) {\n    return x * x * x;\n}",
            "int* get_int_address(int* x) {\n    return 0;\n}"
        ]
    },
    {
        "description": "This function's purpose is to find the product of two integers. It accepts these two integers, let's name them `factor1` and `factor2`, and multiplies them together. The final result of this multiplication is then returned. As an example, if you provide the numbers 7 and 6, the function will output 42.",
        "verbosity": "high",
        "function_name": "find_product",
        "c_implementation": "int find_product(int factor1, int factor2) {\n    return factor1 * factor2;\n}",
        "c_corrupted_implementation": [
            "int find_product(int factor1, int factor2) {\n    return factor1 % factor2;\n}",
            "int find_product(int factor1, int factor2) {\n    return factor1 + factor2;\n}",
            "int find_product(int factor1, int factor2) {\n    return factor1 / factor2;\n}"
        ]
    },
    {
        "description": "Given two integers `a` and `b`, this function returns `(a - b) * a`.",
        "verbosity": "medium",
        "function_name": "difference_and_multiply",
        "c_implementation": "int difference_and_multiply(int a, int b) {\n    return (a - b) * a;\n}",
        "c_corrupted_implementation": [
            "int difference_and_multiply(int a, int b) {\n    return a - (b * a);\n}",
            "int difference_and_multiply(int a, int b) {\n    return a - (b * 2);\n}",
            "int difference_and_multiply(int a, int b) {\n    return a - (4 * a) + 1;\n}"
        ]
    },
    {
        "description": "Given two integers, x and y, this program returns x - y.",
        "verbosity": "low",
        "function_name": "subtract_y_from_x",
        "c_implementation": "int subtract_y_from_x(int x, int y) {\n    return x - y;\n}",
        "c_corrupted_implementation": [
            "int subtract_y_from_x(int x, int y) {\n    return y - x;\n}",
            "int subtract_y_from_x(int x, int y) {\n    return x + y;\n}",
            "int subtract_y_from_x(int x, int y) {\n    return x * 1;\n}"
        ]
    },
    {
        "description": "The program takes two integer inputs, `val1` and `val2`. It performs a bitwise OR operation between them and returns the resulting integer.",
        "verbosity": "medium",
        "function_name": "get_bitwise_or",
        "c_implementation": "int get_bitwise_or(int val1, int val2) {\n    return val1 | val2;\n}",
        "c_corrupted_implementation": [
            "int get_bitwise_or(int val1, int val2) {\n    return val1 & val2;\n}",
            "int get_bitwise_or(int val1, int val2) {\n    return val1 / val2;\n}",
            "int get_bitwise_or(int val1, int val2) {\n    return val1 * val2;\n}"
        ]
    },
    {
        "description": "This function performs a series of arithmetic operations. It takes three integer inputs: `a`, `b`, and `c`. The function first multiplies `a` and `b`, then divides the result by `c` using integer division.",
        "verbosity": "medium",
        "function_name": "multiply_and_divide",
        "c_implementation": "int multiply_and_divide(int a, int b, int c) {\n    return (a * b) / c;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_divide(int a, int b, int c) {\n    return a * (b / c);\n}",
            "int multiply_and_divide(int a, int b, int c) {\n    return a / (b / c);\n}",
            "int multiply_and_divide(int a, int b, int c) {\n    return a + (b / c);\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, this function increments the integer it points to by one.",
        "verbosity": "low",
        "function_name": "increment_pointed_value",
        "c_implementation": "void increment_pointed_value(int* p) {\n    *p = *p + 1;\n}",
        "c_corrupted_implementation": [
            "void increment_pointed_value(int* p) {\n    p = p + 1;\n}",
            "void increment_pointed_value(int* p) {\n    p = p;\n}",
            "void increment_pointed_value(int* p) {\n    p = NULL;\n}"
        ]
    },
    {
        "description": "This program's single responsibility is to retrieve a value from memory. It is given a single argument: a pointer to an integer, let's call it `int_pointer`. The program accesses the memory location indicated by `int_pointer` and returns the integer value stored at that address. It essentially reveals the value that the pointer is 'pointing to'.",
        "verbosity": "high",
        "function_name": "retrieve_value_from_pointer",
        "c_implementation": "int retrieve_value_from_pointer(int* int_pointer) {\n    return *int_pointer;\n}",
        "c_corrupted_implementation": [
            "int retrieve_value_from_pointer(int* int_pointer) {\n    return (int)int_pointer;\n}",
            "int retrieve_value_from_pointer(int* int_pointer) {\n    return 3;\n}",
            "int retrieve_value_from_pointer(int* int_pointer) {\n    return int_pointer;\n}"
        ]
    },
    {
        "description": "Calculates the bitwise NOT of an integer x.",
        "verbosity": "low",
        "function_name": "get_bitwise_not",
        "c_implementation": "int get_bitwise_not(int x) {\n    return ~x;\n}",
        "c_corrupted_implementation": [
            "int get_bitwise_not(int x) {\n    return -x;\n}",
            "int get_bitwise_not(int x) {\n    return x * x;\n}",
            "int get_bitwise_not(int x) {\n    return 1;\n}"
        ]
    },
    {
        "description": "The function's objective is to compute the modulo of two numbers. It takes two integer parameters, a dividend and a divisor, and returns the remainder after their integer division.",
        "verbosity": "medium",
        "function_name": "compute_modulo",
        "c_implementation": "int compute_modulo(int dividend, int divisor) {\n    return dividend % divisor;\n}",
        "c_corrupted_implementation": [
            "int compute_modulo(int dividend, int divisor) {\n    return divisor % dividend;\n}",
            "int compute_modulo(int dividend, int divisor) {\n    return dividend / divisor;\n}",
            "int compute_modulo(int dividend, int divisor) {\n    return divisor + dividend;\n}"
        ]
    },
    {
        "description": "This function is designed to take two integer pointers, `p1` and `p2`. It dereferences both pointers to get their respective integer values, and then returns the product of these two values.",
        "verbosity": "high",
        "function_name": "get_product_from_pointers",
        "c_implementation": "int get_product_from_pointers(int* p1, int* p2) {\n    return (*p1) * (*p2);\n}",
        "c_corrupted_implementation": [
            "int get_product_from_pointers(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int get_product_from_pointers(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
            "int get_product_from_pointers(int* p1, int* p2) {\n    return *p1 & *p2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, the program doubles the value at that address.",
        "verbosity": "low",
        "function_name": "double_pointed_value",
        "c_implementation": "void double_pointed_value(int* p) {\n    *p = *p * 2;\n}",
        "c_corrupted_implementation": [
            "void double_pointed_value(int* p) {\n    *p = *p + 2;\n}",
            "void double_pointed_value(int* p) {\n    *p = *p - 1;\n}",
            "void double_pointed_value(int* p) {\n    *p = *p + *p;\n}"
        ]
    },
    {
        "description": "Computes `(a * a) - (b * b)` for two integers a and b.",
        "verbosity": "low",
        "function_name": "difference_of_squares",
        "c_implementation": "int difference_of_squares(int a, int b) {\n    return (a * a) - (b * b);\n}",
        "c_corrupted_implementation": [
            "int difference_of_squares(int a, int b) {\n    return (a - b) * (a - b);\n}",
            "int difference_of_squares(int a, int b) {\n    return (a - a) * (a - b);\n}",
            "int difference_of_squares(int a, int b) {\n    return a * (b - a);\n}"
        ]
    },
    {
        "description": "This function is designed to perform a specific three-step arithmetic calculation. It takes three integer inputs, which we'll call 'first', 'second', and 'third'. The procedure is as follows: first, it adds 'first' and 'second' together. Second, it subtracts 'third' from that sum. Finally, it returns the resulting integer value.",
        "verbosity": "high",
        "function_name": "add_then_subtract",
        "c_implementation": "int add_then_subtract(int first, int second, int third) {\n    return (first + second) - third;\n}",
        "c_corrupted_implementation": [
            "int add_then_subtract(int first, int second, int third) {\n    return first + (second - third);\n}",
            "int add_then_subtract(int first, int second, int third) {\n    return first + 2 * second - 3 * third;\n}",
            "int add_then_subtract(int first, int second, int third) {\n    return first + second + third;\n}"
        ]
    },
    {
        "description": "Takes an integer and returns its negative.",
        "verbosity": "low",
        "function_name": "negate_integer",
        "c_implementation": "int negate_integer(int x) {\n    return -x;\n}",
        "c_corrupted_implementation": [
            "int negate_integer(int x) {\n    return ~x;\n}",
            "int negate_integer(int x) {\n    return x;\n}",
            "int negate_integer(int x) {\n    return x + 2;\n}"
        ]
    },
    {
        "description": "The program takes an integer `x` and returns `x` multiplied by 2 using a bitwise left shift by 1 position.",
        "verbosity": "medium",
        "function_name": "multiply_by_two_shift",
        "c_implementation": "int multiply_by_two_shift(int x) {\n    return x << 1;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_two_shift(int x) {\n    return x >> 1;\n}",
            "int multiply_by_two_shift(int x) {\n    return x * x * x * x;\n}",
            "int multiply_by_two_shift(int x) {\n    return x + 2;\n}"
        ]
    },
    {
        "description": "Given two integer pointers `p1` and `p2`, returns the sum of the values they point to.",
        "verbosity": "low",
        "function_name": "sum_via_pointers",
        "c_implementation": "int sum_via_pointers(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
        "c_corrupted_implementation": [
            "int sum_via_pointers(int* p1, int* p2) {\n    return (int)(p1 + (int)p2);\n}",
            "int sum_via_pointers(int* p1, int* p2) {\n    return 0;\n}",
            "int sum_via_pointers(int* p1, int* p2) {\n    return p1 + p2;\n}"
        ]
    },
    {
        "description": "This program takes two integer pointers, `ptr_a` and `ptr_b`. It calculates the difference between the integer values stored at the memory locations they point to.",
        "verbosity": "medium",
        "function_name": "difference_of_pointed_values",
        "c_implementation": "int difference_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return *ptr_a - *ptr_b;\n}",
        "c_corrupted_implementation": [
            "int difference_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return *ptr_b - *ptr_a;\n}",
            "int difference_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return *ptr_b + *ptr_a;\n}",
            "int difference_of_pointed_values(int* ptr_a, int* ptr_b) {\n    return *ptr_b * *ptr_a;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and returns the address of the integer it points to.",
        "verbosity": "low",
        "function_name": "get_pointer_address",
        "c_implementation": "int* get_pointer_address(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* get_pointer_address(int* p) {\n    return p - 1;\n}",
            "int* get_pointer_address(int* p) {\n    return p - p;\n}",
            "int* get_pointer_address(int* p) {\n    return 2 * p;\n}"
        ]
    },
    {
        "description": "The function's purpose is to provide the memory address of a given variable. It takes a single integer variable as input, let's call it 'data'. The function then applies the address-of operator to 'data' and returns the resulting pointer, which holds the memory location where 'data' is stored.",
        "verbosity": "high",
        "function_name": "get_variable_address",
        "c_implementation": "int* get_variable_address(int* data) {\n    return data;\n}",
        "c_corrupted_implementation": [
            "int* get_variable_address(int* data) {\n    return NULL;\n}",
            "int* get_variable_address(int* data) {\n    return **data;\n}",
            "int* get_variable_address(int* data) {\n    return &data + 1;\n}"
        ]
    },
    {
        "description": "Computes `(a + b) % c` for three integers a, b, and c.",
        "verbosity": "low",
        "function_name": "sum_and_modulo",
        "c_implementation": "int sum_and_modulo(int a, int b, int c) {\n    return (a + b) % c;\n}",
        "c_corrupted_implementation": [
            "int sum_and_modulo(int a, int b, int c) {\n    return a + (b % c);\n}",
            "int sum_and_modulo(int a, int b, int c) {\n    return a + (b - c);\n}",
            "int sum_and_modulo(int a, int b, int c) {\n    return a + b + c;\n}"
        ]
    },
    {
        "description": "This program takes an integer and performs a bitwise left shift by 3 positions, which is equivalent to multiplying by 8.",
        "verbosity": "medium",
        "function_name": "left_shift_by_three",
        "c_implementation": "int left_shift_by_three(int n) {\n    return n << 3;\n}",
        "c_corrupted_implementation": [
            "int left_shift_by_three(int n) {\n    return n * 3;\n}",
            "int left_shift_by_three(int n) {\n    return n - 2;\n}",
            "int left_shift_by_three(int n) {\n    return n;\n}"
        ]
    },
    {
        "description": "Takes two integers `a` and `b` and returns `a + a + b + b`.",
        "verbosity": "low",
        "function_name": "sum_of_doubles",
        "c_implementation": "int sum_of_doubles(int a, int b) {\n    return a + a + b + b;\n}",
        "c_corrupted_implementation": [
            "int sum_of_doubles(int a, int b) {\n    return a + b + b;\n}",
            "int sum_of_doubles(int a, int b) {\n    return a + a + b;\n}",
            "int sum_of_doubles(int a, int b) {\n    return a + b;\n}"
        ]
    },
    {
        "description": "The function is designed to take an integer `n` and check if it is even or odd. It does this by performing a bitwise AND operation with the number 1. If the result is 0, the number is even and the function returns 1 (true). If the result is 1, the number is odd and the function returns 0 (false).",
        "verbosity": "high",
        "function_name": "is_even",
        "c_implementation": "int is_even(int n) {\n    return (n & 1) == 0;\n}",
        "c_corrupted_implementation": [
            "int is_even(int n) {\n    return (n % 2) != 0;\n}",
            "int is_even(int n) {\n    return (n + 2) != 0;\n}",
            "int is_even(int n) {\n    return n - 1;\n}"
        ]
    },
    {
        "description": "Given an integer pointer `p`, the function updates the value it points to by performing a bitwise AND with the integer `mask`.",
        "verbosity": "medium",
        "function_name": "apply_and_mask_to_pointer",
        "c_implementation": "void apply_and_mask_to_pointer(int* p, int mask) {\n    *p = *p & mask;\n}",
        "c_corrupted_implementation": [
            "void apply_and_mask_to_pointer(int* p, int mask) {\n    *p = *p | mask;\n}",
            "void apply_and_mask_to_pointer(int* p, int mask) {\n    *p = *p;\n}",
            "void apply_and_mask_to_pointer(int* p, int mask) {\n    *p = 1;\n}"
        ]
    },
    {
        "description": "Calculates `x / 2` using a bitwise right shift.",
        "verbosity": "low",
        "function_name": "divide_by_two_shift",
        "c_implementation": "int divide_by_two_shift(int x) {\n    return x >> 1;\n}",
        "c_corrupted_implementation": [
            "int divide_by_two_shift(int x) {\n    return x << 1;\n}",
            "int divide_by_two_shift(int x) {\n    return x + x;\n}",
            "int divide_by_two_shift(int x) {\n    return x * x;\n}"
        ]
    },
    {
        "description": "The program's function is to perform a simple subtraction. It is provided with two integer values, a minuend and a subtrahend. It calculates the difference by subtracting the subtrahend from the minuend and then returns the final integer result.",
        "verbosity": "high",
        "function_name": "simple_subtract",
        "c_implementation": "int simple_subtract(int minuend, int subtrahend) {\n    return minuend - subtrahend;\n}",
        "c_corrupted_implementation": [
            "int simple_subtract(int minuend, int subtrahend) {\n    return minuend * subtrahend;\n}",
            "int simple_subtract(int minuend, int subtrahend) {\n    return minuend + 1 / subtrahend;\n}",
            "int simple_subtract(int minuend, int subtrahend) {\n    return minuend + subtrahend;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns the value at `p` minus 1.",
        "verbosity": "low",
        "function_name": "get_value_minus_one",
        "c_implementation": "int get_value_minus_one(int* p) {\n    return *p - 1;\n}",
        "c_corrupted_implementation": [
            "int get_value_minus_one(int* p) {\n    return *p + 1;\n}",
            "int get_value_minus_one(int* p) {\n    return *p * 2;\n}",
            "int get_value_minus_one(int* p) {\n    return *p / 3;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and an integer `x`. It modifies the value pointed to by `p` by adding `x` to it.",
        "verbosity": "medium",
        "function_name": "add_to_pointed_value",
        "c_implementation": "void add_to_pointed_value(int* p, int x) {\n    *p = *p + x;\n}",
        "c_corrupted_implementation": [
            "void add_to_pointed_value(int* p, int x) {\n    *p = x;\n}",
            "void add_to_pointed_value(int* p, int x) {\n    *p = 0;\n}",
            "void add_to_pointed_value(int* p, int x) {\n    *p += 1;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `(x << 2) + x`, which is a fast way to multiply by 5.",
        "verbosity": "low",
        "function_name": "multiply_by_five_fast",
        "c_implementation": "int multiply_by_five_fast(int x) {\n    return (x << 2) + x;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_five_fast(int x) {\n    return (x << 2) - x;\n}",
            "int multiply_by_five_fast(int x) {\n    return x - 2;\n}",
            "int multiply_by_five_fast(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "Computes the average of two integers, `a` and `b`.",
        "verbosity": "low",
        "function_name": "average_of_two",
        "c_implementation": "int average_of_two(int a, int b) {\n    return (a + b) / 2;\n}",
        "c_corrupted_implementation": [
            "int average_of_two(int a, int b) {\n    return (a * b) / 2;\n}",
            "int average_of_two(int a, int b) {\n    return a - 2;\n}",
            "int average_of_two(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "This program takes three integers, `a`, `b`, and `c`. It returns the result of the expression `a * b + c`.",
        "verbosity": "medium",
        "function_name": "multiply_and_add_three",
        "c_implementation": "int multiply_and_add_three(int a, int b, int c) {\n    return a * b + c;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_add_three(int a, int b, int c) {\n    return a * (b + c);\n}",
            "int multiply_and_add_three(int a, int b, int c) {\n    return a - b - c;\n}",
            "int multiply_and_add_three(int a, int b, int c) {\n    return a / (b + c);\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, the function returns the value of the integer divided by 4.",
        "verbosity": "low",
        "function_name": "get_value_divided_by_four",
        "c_implementation": "int get_value_divided_by_four(int* p) {\n    return *p / 4;\n}",
        "c_corrupted_implementation": [
            "int get_value_divided_by_four(int* p) {\n    return *p * 4;\n}",
            "int get_value_divided_by_four(int* p) {\n    return *p + 4;\n}",
            "int get_value_divided_by_four(int* p) {\n    return *p;\n}"
        ]
    },
    {
        "description": "Calculates `(x+y)*(x-y)` for two integers x and y.",
        "verbosity": "low",
        "function_name": "product_of_sum_and_diff",
        "c_implementation": "int product_of_sum_and_diff(int x, int y) {\n    return (x + y) * (x - y);\n}",
        "c_corrupted_implementation": [
            "int product_of_sum_and_diff(int x, int y) {\n    return (x * y) + (x - y);\n}",
            "int product_of_sum_and_diff(int x, int y) {\n    return x - y;\n}",
            "int product_of_sum_and_diff(int x, int y) {\n    return y * (x + y);\n}"
        ]
    },
    {
        "description": "The program's role is to perform a bitwise exclusive OR (XOR) operation. It accepts two integer values as its inputs. It then computes the XOR between these two integers and returns the resulting integer value.",
        "verbosity": "high",
        "function_name": "perform_xor",
        "c_implementation": "int perform_xor(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int perform_xor(int a, int b) {\n    return a + b;\n}",
            "int perform_xor(int a, int b) {\n    return a - b;\n}",
            "int perform_xor(int a, int b) {\n    return a * a * b;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns `x` if it's even, `x-1` if it's odd.",
        "verbosity": "medium",
        "function_name": "floor_to_even",
        "c_implementation": "int floor_to_even(int x) {\n    return x - (x & 1);\n}",
        "c_corrupted_implementation": [
            "int floor_to_even(int x) {\n    return x + (x & 1);\n}",
            "int floor_to_even(int x) {\n    return x * (x + 1);\n}",
            "int floor_to_even(int x) {\n    return x + 2 - (x ^ 1);\n}"
        ]
    },
    {
        "description": "Returns 0.",
        "verbosity": "low",
        "function_name": "return_zero",
        "c_implementation": "int return_zero() {\n    return 0;\n}",
        "c_corrupted_implementation": [
            "int return_zero() {\n    return 1;\n}",
            "int return_zero() {\n    return 4;\n}",
            "int return_zero() {\n    return 2 * 2 * 2;\n}"
        ]
    },
    {
        "description": "The function takes a pointer to an integer `p`. It retrieves the value at that address, multiplies it by 10, and then returns the result.",
        "verbosity": "medium",
        "function_name": "get_value_times_ten",
        "c_implementation": "int get_value_times_ten(int* p) {\n    return *p * 10;\n}",
        "c_corrupted_implementation": [
            "int get_value_times_ten(int* p) {\n    return *p + 10;\n}",
            "int get_value_times_ten(int* p) {\n    return *p * 0;\n}",
            "int get_value_times_ten(int* p) {\n    return *p;\n}"
        ]
    },
    {
        "description": "Given an integer, returns 1 if it is non-zero and 0 if it is zero.",
        "verbosity": "low",
        "function_name": "is_non_zero",
        "c_implementation": "int is_non_zero(int n) {\n    return !!n;\n}",
        "c_corrupted_implementation": [
            "int is_non_zero(int n) {\n    return !n;\n}",
            "int is_non_zero(int n) {\n    return 0;\n}",
            "int is_non_zero(int n) {\n    return !n + 1;\n}"
        ]
    },
    {
        "description": "The program takes an integer value and a bit position `k`. It returns a new integer where the k-th bit of the original value is set to 1, leaving other bits unchanged.",
        "verbosity": "medium",
        "function_name": "set_kth_bit",
        "c_implementation": "int set_kth_bit(int n, int k) {\n    return n | (1 << k);\n}",
        "c_corrupted_implementation": [
            "int set_kth_bit(int n, int k) {\n    return n & (1 << k);\n}",
            "int set_kth_bit(int n, int k) {\n    return n + (1 - k);\n}",
            "int set_kth_bit(int n, int k) {\n    return (1 << k) - x;\n}"
        ]
    },
    {
        "description": "This function takes two integers, `a` and `b`. It returns the result of `a` left-shifted by `b` positions.",
        "verbosity": "low",
        "function_name": "shift_left_by_b",
        "c_implementation": "int shift_left_by_b(int a, int b) {\n    return a << b;\n}",
        "c_corrupted_implementation": [
            "int shift_left_by_b(int a, int b) {\n    return a + b;\n}",
            "int shift_left_by_b(int a, int b) {\n    return a - b;\n}",
            "int shift_left_by_b(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform integer division. It accepts two integer values, a dividend and a divisor, as its inputs. The function then carries out the division of the dividend by the divisor and returns the resulting integer quotient, discarding any fractional part.",
        "verbosity": "high",
        "function_name": "perform_integer_division",
        "c_implementation": "int perform_integer_division(int dividend, int divisor) {\n    return dividend / divisor;\n}",
        "c_corrupted_implementation": [
            "int perform_integer_division(int dividend, int divisor) {\n    return dividend * divisor;\n}",
            "int perform_integer_division(int dividend, int divisor) {\n    return dividend % divisor;\n}",
            "int perform_integer_division(int dividend, int divisor) {\n    return dividend - divisor;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and returns the integer value it points to, multiplied by -1.",
        "verbosity": "medium",
        "function_name": "get_negated_pointed_value",
        "c_implementation": "int get_negated_pointed_value(int* p) {\n    return -(*p);\n}",
        "c_corrupted_implementation": [
            "int get_negated_pointed_value(int* p) {\n    return ~(*p);\n}",
            "int get_negated_pointed_value(int* p) {\n    return 1 - (*p);\n}",
            "int get_negated_pointed_value(int* p) {\n    return 0;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer `p`, the function sets the value it points to, to 0.",
        "verbosity": "low",
        "function_name": "zero_out_pointed_value",
        "c_implementation": "void zero_out_pointed_value(int* p) {\n    *p = 0;\n}",
        "c_corrupted_implementation": [
            "void zero_out_pointed_value(int* p) {\n    p = 0;\n}",
            "void zero_out_pointed_value(int* p) {\n    p = p;\n}",
            "void zero_out_pointed_value(int* p) {\n    p += 1;\n}"
        ]
    },
    {
        "description": "This program is designed to take three integers, `x`, `y`, and `z`, and compute their product. It multiplies `x` by `y`, and then multiplies the result by `z`, returning the final value.",
        "verbosity": "high",
        "function_name": "product_of_three",
        "c_implementation": "int product_of_three(int x, int y, int z) {\n    return x * y * z;\n}",
        "c_corrupted_implementation": [
            "int product_of_three(int x, int y, int z) {\n    return x + y + z;\n}",
            "int product_of_three(int x, int y, int z) {\n    return x - y / z + 1;\n}",
            "int product_of_three(int x, int y, int z) {\n    return x * x * y / z + 1;\n}"
        ]
    },
    {
        "description": "Calculates `(x * 8) / 2` using bit shifts.",
        "verbosity": "low",
        "function_name": "multiply_by_8_div_by_2_shift",
        "c_implementation": "int multiply_by_8_div_by_2_shift(int x) {\n    return (x << 3) >> 1;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_8_div_by_2_shift(int x) {\n    return (x << 3) << 1;\n}",
            "int multiply_by_8_div_by_2_shift(int x) {\n    return (x + 3) << 2;\n}",
            "int multiply_by_8_div_by_2_shift(int x) {\n    return (x - 1) * 3;\n}"
        ]
    },
    {
        "description": "Returns an integer's value multiplied by 16.",
        "verbosity": "low",
        "function_name": "multiply_by_16",
        "c_implementation": "int multiply_by_16(int n) {\n    return n * 16;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_16(int n) {\n    return n + 16;\n}",
            "int multiply_by_16(int n) {\n    return n - 10;\n}",
            "int multiply_by_16(int n) {\n    return &n;\n}"
        ]
    },
    {
        "description": "The program accepts a single integer value as its argument. Its function is to perform a bitwise complement, also known as a NOT operation. This means every bit that is a 1 in the input integer becomes a 0, and every bit that is a 0 becomes a 1. The resulting integer is then returned.",
        "verbosity": "high",
        "function_name": "perform_bitwise_complement",
        "c_implementation": "int perform_bitwise_complement(int n) {\n    return ~n;\n}",
        "c_corrupted_implementation": [
            "int perform_bitwise_complement(int n) {\n    return -n;\n}",
            "int perform_bitwise_complement(int n) {\n    return -n + 1;\n}",
            "int perform_bitwise_complement(int n) {\n    return n * 2;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, this function returns `x + 1`.",
        "verbosity": "medium",
        "function_name": "increment_integer",
        "c_implementation": "int increment_integer(int x) {\n    return x + 1;\n}",
        "c_corrupted_implementation": [
            "int increment_integer(int x) {\n    return x - 1;\n}",
            "int increment_integer(int x) {\n    return x * 2;\n}",
            "int increment_integer(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and an integer `val`. It sets the value at `p` to `val`.",
        "verbosity": "low",
        "function_name": "set_pointed_value",
        "c_implementation": "void set_pointed_value(int* p, int val) {\n    *p = val;\n}",
        "c_corrupted_implementation": [
            "void set_pointed_value(int* p, int val) {\n    *p = *p + val;\n}",
            "void set_pointed_value(int* p, int val) {\n    *p = p * val;\n}",
            "void set_pointed_value(int* p, int val) {\n    *p = *p + *val;\n}"
        ]
    },
    {
        "description": "Given four integers, returns their sum.",
        "verbosity": "low",
        "function_name": "sum_of_four",
        "c_implementation": "int sum_of_four(int a, int b, int c, int d) {\n    return a + b + c + d;\n}",
        "c_corrupted_implementation": [
            "int sum_of_four(int a, int b, int c, int d) {\n    return a + b + c * d;\n}",
            "int sum_of_four(int a, int b, int c, int d) {\n    return a + b * c * d;\n}",
            "int sum_of_four(int a, int b, int c, int d) {\n    return a - b - 1 + c * d;\n}"
        ]
    },
    {
        "description": "This function's purpose is to perform a bitwise AND operation. It takes two integer values as input. It then compares the corresponding bits of the two integers and produces a new integer where a bit is set to 1 only if the corresponding bits in both input integers were also 1. This new integer is the return value.",
        "verbosity": "high",
        "function_name": "detailed_bitwise_and",
        "c_implementation": "int detailed_bitwise_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int detailed_bitwise_and(int a, int b) {\n    return a | b;\n}",
            "int detailed_bitwise_and(int a, int b) {\n    return a | b + 1;\n}",
            "int detailed_bitwise_and(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "Returns the product of three integers.",
        "verbosity": "low",
        "function_name": "product_three_integers",
        "c_implementation": "int product_three_integers(int a, int b, int c) {\n    return a * b * c;\n}",
        "c_corrupted_implementation": [
            "int product_three_integers(int a, int b, int c) {\n    return a * b + c;\n}",
            "int product_three_integers(int a, int b, int c) {\n    return a / b * c;\n}",
            "int product_three_integers(int a, int b, int c) {\n    return a / b - c;\n}"
        ]
    },
    {
        "description": "This function takes an integer `x` and returns `(x * 10) + 5`.",
        "verbosity": "medium",
        "function_name": "multiply_by_10_add_5",
        "c_implementation": "int multiply_by_10_add_5(int x) {\n    return (x * 10) + 5;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_10_add_5(int x) {\n    return x * (10 + 5);\n}",
            "int multiply_by_10_add_5(int x) {\n    return x * 11;\n}",
            "int multiply_by_10_add_5(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, returns `(x | y) & x`.",
        "verbosity": "low",
        "function_name": "bitwise_or_and",
        "c_implementation": "int bitwise_or_and(int x, int y) {\n    return (x | y) & x;\n}",
        "c_corrupted_implementation": [
            "int bitwise_or_and(int x, int y) {\n    return (x & y) | x;\n}",
            "int bitwise_or_and(int x, int y) {\n    return (x * y) + x;\n}",
            "int bitwise_or_and(int x, int y) {\n    return x - y - x;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address.",
        "verbosity": "medium",
        "function_name": "get_value_from_pointer",
        "c_implementation": "int get_value_from_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_from_pointer(int* p) {\n    return 0;\n}",
            "int get_value_from_pointer(int* p) {\n    return 1;\n}",
            "int get_value_from_pointer(int* p) {\n    return NULL;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns its memory address.",
        "verbosity": "low",
        "function_name": "address_of_int",
        "c_implementation": "int* address_of_int(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* address_of_int(int* x) {\n    return x+1;\n}",
            "int* address_of_int(int* x) {\n    return x;\n}",
            "int* address_of_int(int* x) {\n    return x * x;\n}"
        ]
    },
    {
        "description": "The function's objective is to perform a bitwise right shift. It accepts an integer to be shifted and an integer representing the number of positions to shift. It shifts the bits of the first integer to the right by the specified number of positions and returns the modified integer.",
        "verbosity": "high",
        "function_name": "perform_right_shift",
        "c_implementation": "int perform_right_shift(int num, int shift) {\n    return num >> shift;\n}",
        "c_corrupted_implementation": [
            "int perform_right_shift(int num, int shift) {\n    return num << shift;\n}",
            "int perform_right_shift(int num, int shift) {\n    return num + shift;\n}",
            "int perform_right_shift(int num, int shift) {\n    return num - shift;\n}"
        ]
    },
    {
        "description": "Calculates `(a-b) + (c-d)` for four integers.",
        "verbosity": "low",
        "function_name": "sum_of_differences",
        "c_implementation": "int sum_of_differences(int a, int b, int c, int d) {\n    return (a - b) + (c - d);\n}",
        "c_corrupted_implementation": [
            "int sum_of_differences(int a, int b, int c, int d) {\n    return (a + b) - (c + d);\n}",
            "int sum_of_differences(int a, int b, int c, int d) {\n    return (a + 2) - (c + d + b);\n}",
            "int sum_of_differences(int a, int b, int c, int d) {\n    return (d + b) + (c + a);\n}"
        ]
    },
    {
        "description": "This program takes a single integer `n` and returns `n` modulo 2.",
        "verbosity": "medium",
        "function_name": "modulo_two",
        "c_implementation": "int modulo_two(int n) {\n    return n % 2;\n}",
        "c_corrupted_implementation": [
            "int modulo_two(int n) {\n    return n / 2;\n}",
            "int modulo_two(int n) {\n    return n + 2;\n}",
            "int modulo_two(int n) {\n    return n * 2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, this function returns `*p + *p`.",
        "verbosity": "low",
        "function_name": "double_pointed",
        "c_implementation": "int double_pointed(int* p) {\n    return *p + *p;\n}",
        "c_corrupted_implementation": [
            "int double_pointed(int* p) {\n    return *p * *p;\n}",
            "int double_pointed(int* p) {\n    return *p - *p;\n}",
            "int double_pointed(int* p) {\n    return *p / *p;\n}"
        ]
    },
    {
        "description": "This function takes two integers, `a` and `b`, and returns their sum.",
        "verbosity": "medium",
        "function_name": "add_two_numbers",
        "c_implementation": "int add_two_numbers(int a, int b) {\n    return a + b;\n}",
        "c_corrupted_implementation": [
            "int add_two_numbers(int a, int b) {\n    return a - b;\n}",
            "int add_two_numbers(int a, int b) {\n    return b - a;\n}",
            "int add_two_numbers(int a, int b) {\n    return a * a + b;\n}"
        ]
    },
    {
        "description": "Returns the product of two integers `x` and `y`.",
        "verbosity": "low",
        "function_name": "multiply_x_y",
        "c_implementation": "int multiply_x_y(int x, int y) {\n    return x * y;\n}",
        "c_corrupted_implementation": [
            "int multiply_x_y(int x, int y) {\n    return x / y;\n}",
            "int multiply_x_y(int x, int y) {\n    return x + y;\n}",
            "int multiply_x_y(int x, int y) {\n    return x - y + y;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise OR operation. It accepts two integer values as its arguments. It compares the bits of both integers and generates a new integer where a bit is set to 1 if the bit was 1 in either of the input integers. This resulting integer is then returned as the output.",
        "verbosity": "high",
        "function_name": "perform_bitwise_or",
        "c_implementation": "int perform_bitwise_or(int a, int b) {\n    return a | b;\n}",
        "c_corrupted_implementation": [
            "int perform_bitwise_or(int a, int b) {\n    return a & b;\n}",
            "int perform_bitwise_or(int a, int b) {\n    return a - b;\n}",
            "int perform_bitwise_or(int a, int b) {\n    return a * b * a * b;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer `p`, the program decrements the value it points to by 1.",
        "verbosity": "medium",
        "function_name": "decrement_pointed_value",
        "c_implementation": "void decrement_pointed_value(int* p) {\n    *p = *p - 1;\n}",
        "c_corrupted_implementation": [
            "void decrement_pointed_value(int* p) {\n    *p = 1;\n}",
            "void decrement_pointed_value(int* p) {\n    *p = *p;\n}",
            "void decrement_pointed_value(int* p) {\n    *p = p;\n}"
        ]
    },
    {
        "description": "Calculates `a * b * c * d` for four integers.",
        "verbosity": "low",
        "function_name": "product_of_four",
        "c_implementation": "int product_of_four(int a, int b, int c, int d) {\n    return a * b * c * d;\n}",
        "c_corrupted_implementation": [
            "int product_of_four(int a, int b, int c, int d) {\n    return a + b + c + d;\n}",
            "int product_of_four(int a, int b, int c, int d) {\n    return a - b + c - d;\n}",
            "int product_of_four(int a, int b, int c, int d) {\n    return a + b + c * d + 2;\n}"
        ]
    },
    {
        "description": "Given an integer, returns its value.",
        "verbosity": "low",
        "function_name": "identity_integer",
        "c_implementation": "int identity_integer(int x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int identity_integer(int x) {\n    return x + 1;\n}",
            "int identity_integer(int x) {\n    return x / x;\n}",
            "int identity_integer(int x) {\n    return x & x;\n}"
        ]
    },
    {
        "description": "This program takes a single integer `n` and returns `n` plus 10.",
        "verbosity": "medium",
        "function_name": "add_ten",
        "c_implementation": "int add_ten(int n) {\n    return n + 10;\n}",
        "c_corrupted_implementation": [
            "int add_ten(int n) {\n    return n - 10;\n}",
            "int add_ten(int n) {\n    return n * 5;\n}",
            "int add_ten(int n) {\n    return n / 2;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and an integer `x`. It returns the sum of the value at `p` and `x`.",
        "verbosity": "medium",
        "function_name": "sum_pointer_and_int",
        "c_implementation": "int sum_pointer_and_int(int* p, int x) {\n    return *p + x;\n}",
        "c_corrupted_implementation": [
            "int sum_pointer_and_int(int* p, int x) {\n    return *p * x;\n}",
            "int sum_pointer_and_int(int* p, int x) {\n    return *p - x;\n}",
            "int sum_pointer_and_int(int* p, int x) {\n    return p / x;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p * *p`.",
        "verbosity": "low",
        "function_name": "square_of_pointed_value",
        "c_implementation": "int square_of_pointed_value(int* p) {\n    return *p * *p;\n}",
        "c_corrupted_implementation": [
            "int square_of_pointed_value(int* p) {\n    return *p + *p;\n}",
            "int square_of_pointed_value(int* p) {\n    return *p * p;\n}",
            "int square_of_pointed_value(int* p) {\n    return *p / *p;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns `x / 16`.",
        "verbosity": "low",
        "function_name": "divide_by_16",
        "c_implementation": "int divide_by_16(int x) {\n    return x / 16;\n}",
        "c_corrupted_implementation": [
            "int divide_by_16(int x) {\n    return x * 16;\n}",
            "int divide_by_16(int x) {\n    return x - 2;\n}",
            "int divide_by_16(int x) {\n    return x / 7;\n}"
        ]
    },
    {
        "description": "This program's role is to perform a bitwise left shift. It is given an integer value and an integer that specifies the number of positions to shift. The program shifts all bits in the value to the left by the specified number of positions, filling the vacated rightmost bits with zeros, and returns the final integer.",
        "verbosity": "high",
        "function_name": "perform_left_shift",
        "c_implementation": "int perform_left_shift(int value, int positions) {\n    return value << positions;\n}",
        "c_corrupted_implementation": [
            "int perform_left_shift(int value, int positions) {\n    return value >> positions;\n}",
            "int perform_left_shift(int value, int positions) {\n    return value - positions;\n}",
            "int perform_left_shift(int value, int positions) {\n    return value * positions;\n}"
        ]
    },
    {
        "description": "Given two integers `x` and `y`, returns `x % y`.",
        "verbosity": "medium",
        "function_name": "get_modulo",
        "c_implementation": "int get_modulo(int x, int y) {\n    return x % y;\n}",
        "c_corrupted_implementation": [
            "int get_modulo(int x, int y) {\n    return x / y;\n}",
            "int get_modulo(int x, int y) {\n    return x + y;\n}",
            "int get_modulo(int x, int y) {\n    return x * y;\n}"
        ]
    },
    {
        "description": "This program takes four integers `a, b, c, d` and computes `(a*b) + (c*d)`.",
        "verbosity": "medium",
        "function_name": "sum_of_products",
        "c_implementation": "int sum_of_products(int a, int b, int c, int d) {\n    return (a * b) + (c * d);\n}",
        "c_corrupted_implementation": [
            "int sum_of_products(int a, int b, int c, int d) {\n    return (a + b) * (c + d);\n}",
            "int sum_of_products(int a, int b, int c, int d) {\n    return (a + 2) * (c + d + b + b);\n}",
            "int sum_of_products(int a, int b, int c, int d) {\n    return (a - b) * (c - 2 * d);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x`",
        "verbosity": "low",
        "function_name": "identity_function",
        "c_implementation": "int identity_function(int x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int identity_function(int x) {\n    return ~x;\n}",
            "int identity_function(int x) {\n    return x + 1;\n}",
            "int identity_function(int x) {\n    return x / 2;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns the value it points to.",
        "verbosity": "low",
        "function_name": "dereference_int_pointer",
        "c_implementation": "int dereference_int_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int dereference_int_pointer(int* p) {\n    return 1;\n}",
            "int dereference_int_pointer(int* p) {\n    return p;\n}",
            "int dereference_int_pointer(int* p) {\n    return 5;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer, `p_val`, and an integer `divisor`. It retrieves the value from the memory location `p_val` points to, calculates the remainder of that value when divided by `divisor`, and returns this remainder.",
        "verbosity": "high",
        "function_name": "get_remainder_from_pointer",
        "c_implementation": "int get_remainder_from_pointer(int* p_val, int divisor) {\n    return *p_val % divisor;\n}",
        "c_corrupted_implementation": [
            "int get_remainder_from_pointer(int* p_val, int divisor) {\n    return *p_val / divisor;\n}",
            "int get_remainder_from_pointer(int* p_val, int divisor) {\n    return *p_val ^ divisor;\n}",
            "int get_remainder_from_pointer(int* p_val, int divisor) {\n    return (*p_val + 1) * divisor;\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, returns `x & y`.",
        "verbosity": "medium",
        "function_name": "calculate_bitwise_and",
        "c_implementation": "int calculate_bitwise_and(int x, int y) {\n    return x & y;\n}",
        "c_corrupted_implementation": [
            "int calculate_bitwise_and(int x, int y) {\n    return x | y;\n}",
            "int calculate_bitwise_and(int x, int y) {\n    return x * y;\n}",
            "int calculate_bitwise_and(int x, int y) {\n    return x / y;\n}"
        ]
    },
    {
        "description": "This program takes three integers `a, b, c` and returns `a - b - c`.",
        "verbosity": "medium",
        "function_name": "subtract_three",
        "c_implementation": "int subtract_three(int a, int b, int c) {\n    return a - b - c;\n}",
        "c_corrupted_implementation": [
            "int subtract_three(int a, int b, int c) {\n    return a - (b - c);\n}",
            "int subtract_three(int a, int b, int c) {\n    return a - (b + c);\n}",
            "int subtract_three(int a, int b, int c) {\n    return a * b * c;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x * 4`.",
        "verbosity": "low",
        "function_name": "multiply_by_4",
        "c_implementation": "int multiply_by_4(int x) {\n    return x * 4;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_4(int x) {\n    return x + 4;\n}",
            "int multiply_by_4(int x) {\n    return x - 5;\n}",
            "int multiply_by_4(int x) {\n    return 1 - x;\n}"
        ]
    },
    {
        "description": "The program accepts a single integer value. Its purpose is to return the same integer value, unchanged. It effectively acts as an identity function for an integer.",
        "verbosity": "high",
        "function_name": "integer_identity",
        "c_implementation": "int integer_identity(int n) {\n    return n;\n}",
        "c_corrupted_implementation": [
            "int integer_identity(int n) {\n    return -n;\n}",
            "int integer_identity(int n) {\n    return n + 1;\n}",
            "int integer_identity(int n) {\n    return ~n + 2;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns the result of `*p / 2`.",
        "verbosity": "medium",
        "function_name": "halve_pointed_value",
        "c_implementation": "int halve_pointed_value(int* p) {\n    return *p / 2;\n}",
        "c_corrupted_implementation": [
            "int halve_pointed_value(int* p) {\n    return *p % 2;\n}",
            "int halve_pointed_value(int* p) {\n    return *p + 3;\n}",
            "int halve_pointed_value(int* p) {\n    return *p / 1;\n}"
        ]
    },
    {
        "description": "Given `x`, returns `x` multiplied by 3.",
        "verbosity": "low",
        "function_name": "multiply_by_3",
        "c_implementation": "int multiply_by_3(int x) {\n    return x * 3;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_3(int x) {\n    return x * x * x;\n}",
            "int multiply_by_3(int x) {\n    return x * x + x;\n}",
            "int multiply_by_3(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "This program takes two integer pointers, `p1` and `p2`, and returns the product of the values they point to.",
        "verbosity": "medium",
        "function_name": "product_of_pointers",
        "c_implementation": "int product_of_pointers(int* p1, int* p2) {\n    return (*p1) * (*p2);\n}",
        "c_corrupted_implementation": [
            "int product_of_pointers(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
            "int product_of_pointers(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int product_of_pointers(int* p1, int* p2) {\n    return *p1 + 1 / *p2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, returns `*p & 1`.",
        "verbosity": "low",
        "function_name": "get_last_bit",
        "c_implementation": "int get_last_bit(int* p) {\n    return *p & 1;\n}",
        "c_corrupted_implementation": [
            "int get_last_bit(int* p) {\n    return *p | 1;\n}",
            "int get_last_bit(int* p) {\n    return *p + ~p;\n}",
            "int get_last_bit(int* p) {\n    return 0;\n}"
        ]
    },
    {
        "description": "This function takes two integers `x` and `y` and returns their difference.",
        "verbosity": "medium",
        "function_name": "get_difference",
        "c_implementation": "int get_difference(int x, int y) {\n    return x - y;\n}",
        "c_corrupted_implementation": [
            "int get_difference(int x, int y) {\n    return y - x;\n}",
            "int get_difference(int x, int y) {\n    return y + y + x;\n}",
            "int get_difference(int x, int y) {\n    return y * 2 * x;\n}"
        ]
    },
    {
        "description": "Returns the bitwise OR of `a` and `b`.",
        "verbosity": "low",
        "function_name": "get_or",
        "c_implementation": "int get_or(int a, int b) {\n    return a | b;\n}",
        "c_corrupted_implementation": [
            "int get_or(int a, int b) {\n    return a ^ b;\n}",
            "int get_or(int a, int b) {\n    return a / b;\n}",
            "int get_or(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "The function's purpose is to take a pointer to an integer, `p_num`, and an integer `addend`. It retrieves the value stored at the memory location `p_num` points to, adds the `addend` to this value, and then stores the new sum back into the memory location `p_num`.",
        "verbosity": "high",
        "function_name": "add_to_value_at_pointer",
        "c_implementation": "void add_to_value_at_pointer(int* p_num, int addend) {\n    *p_num = *p_num + addend;\n}",
        "c_corrupted_implementation": [
            "void add_to_value_at_pointer(int* p_num, int addend) {\n    *p_num = addend;\n}",
            "void add_to_value_at_pointer(int* p_num, int addend) {\n    *p_num = -addend;\n}",
            "void add_to_value_at_pointer(int* p_num, int addend) {\n    *p_num = 1 + addend;\n}"
        ]
    },
    {
        "description": "This program takes three integers `a, b, c` and returns `(a * c) - (b * c)`.",
        "verbosity": "medium",
        "function_name": "distributive_property",
        "c_implementation": "int distributive_property(int a, int b, int c) {\n    return (a * c) - (b * c);\n}",
        "c_corrupted_implementation": [
            "int distributive_property(int a, int b, int c) {\n    return (a - b) * c;\n}",
            "int distributive_property(int a, int b, int c) {\n    return a + b + c;\n}",
            "int distributive_property(int a, int b, int c) {\n    return a - b - c;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x` XOR `x`.",
        "verbosity": "low",
        "function_name": "xor_with_self",
        "c_implementation": "int xor_with_self(int x) {\n    return x ^ x;\n}",
        "c_corrupted_implementation": [
            "int xor_with_self(int x) {\n    return x & x;\n}",
            "int xor_with_self(int x) {\n    return x / x;\n}",
            "int xor_with_self(int x) {\n    return x * x;\n}"
        ]
    },
    {
        "description": "The program takes a single integer `n` and returns the integer `n` itself.",
        "verbosity": "medium",
        "function_name": "return_self",
        "c_implementation": "int return_self(int n) {\n    return n;\n}",
        "c_corrupted_implementation": [
            "int return_self(int n) {\n    return 0;\n}",
            "int return_self(int n) {\n    return n * n;\n}",
            "int return_self(int n) {\n    return 1 - n;\n}"
        ]
    },
    {
        "description": "Returns `(x+1)*(x-1)` for an integer `x`.",
        "verbosity": "low",
        "function_name": "square_minus_one",
        "c_implementation": "int square_minus_one(int x) {\n    return (x + 1) * (x - 1);\n}",
        "c_corrupted_implementation": [
            "int square_minus_one(int x) {\n    return (x * x) + 1;\n}",
            "int square_minus_one(int x) {\n    return (x - x) + 3;\n}",
            "int square_minus_one(int x) {\n    return x * x * 8;\n}"
        ]
    },
    {
        "description": "This function's purpose is to dereference a pointer. It accepts a single argument, which is a pointer to an integer. It then accesses the memory address stored in the pointer and returns the integer value that resides at that location.",
        "verbosity": "high",
        "function_name": "get_value_via_pointer",
        "c_implementation": "int get_value_via_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_via_pointer(int* p) {\n    return (int)p + 1;\n}",
            "int get_value_via_pointer(int* p) {\n    return (int)p - 2;\n}",
            "int get_value_via_pointer(int* p) {\n    return (int)p * (int)p;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p + 10`.",
        "verbosity": "low",
        "function_name": "get_val_plus_10",
        "c_implementation": "int get_val_plus_10(int* p) {\n    return *p + 10;\n}",
        "c_corrupted_implementation": [
            "int get_val_plus_10(int* p) {\n    return *p - 10;\n}",
            "int get_val_plus_10(int* p) {\n    return *p;\n}",
            "int get_val_plus_10(int* p) {\n    return *p * 2;\n}"
        ]
    },
    {
        "description": "This program takes two integers `x` and `y` and returns their product.",
        "verbosity": "medium",
        "function_name": "calculate_product",
        "c_implementation": "int calculate_product(int x, int y) {\n    return x * y;\n}",
        "c_corrupted_implementation": [
            "int calculate_product(int x, int y) {\n    return x / y;\n}",
            "int calculate_product(int x, int y) {\n    return x + y;\n}",
            "int calculate_product(int x, int y) {\n    return (x + 1) / (x + y);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `~x`.",
        "verbosity": "low",
        "function_name": "bitwise_complement",
        "c_implementation": "int bitwise_complement(int x) {\n    return ~x;\n}",
        "c_corrupted_implementation": [
            "int bitwise_complement(int x) {\n    return x;\n}",
            "int bitwise_complement(int x) {\n    return x + 1;\n}",
            "int bitwise_complement(int x) {\n    return x - 2;\n}"
        ]
    },
    {
        "description": "The function is designed to swap the values of two integers, `a` and `b`, which are passed by pointer. It receives two integer pointers as arguments. Using a temporary integer variable, it dereferences the pointers to access their values and successfully swaps the contents of their memory locations.",
        "verbosity": "high",
        "function_name": "swap_values_by_pointer",
        "c_implementation": "void swap_values_by_pointer(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_values_by_pointer(int* a, int* b) {\n    int temp = *a;\n    *b = *a;\n    *a = temp;\n}",
            "void swap_values_by_pointer(int* a, int* b) {\n    int temp = *a;\n    *b = *a;\n    *a = *a;\n}",
            "void swap_values_by_pointer(int* a, int* b) {\n    int temp = *a;\n    *a = *a;\n    *a = *b;\n}"
        ]
    },
    {
        "description": "This program takes two integers, `a` and `b`, and returns the average, calculated as `(a+b)/2`.",
        "verbosity": "medium",
        "function_name": "calculate_average",
        "c_implementation": "int calculate_average(int a, int b) {\n    return (a + b) / 2;\n}",
        "c_corrupted_implementation": [
            "int calculate_average(int a, int b) {\n    return a + (b / 2);\n}",
            "int calculate_average(int a, int b) {\n    return a + (b - 2);\n}",
            "int calculate_average(int a, int b) {\n    return a * (b / 2);\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns the address of the integer it points to.",
        "verbosity": "low",
        "function_name": "get_address_from_pointer",
        "c_implementation": "int* get_address_from_pointer(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* get_address_from_pointer(int* p) {\n    return p+1;\n}",
            "int* get_address_from_pointer(int* p) {\n    return p + NULL;\n}",
            "int* get_address_from_pointer(int* p) {\n    return *p;\n}"
        ]
    },
    {
        "description": "This function's purpose is to return the memory location of a given integer variable. It accepts one integer as an argument and returns a pointer containing the address of that integer in memory.",
        "verbosity": "high",
        "function_name": "get_memory_location",
        "c_implementation": "int* get_memory_location(int* var) {\n    return var;\n}",
        "c_corrupted_implementation": [
            "int* get_memory_location(int* var) {\n    return NULL;\n}",
            "int* get_memory_location(int* var) {\n    return 3;\n}",
            "int* get_memory_location(int* var) {\n    return 5 * var;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns `x*x`.",
        "verbosity": "low",
        "function_name": "square_integer",
        "c_implementation": "int square_integer(int x) {\n    return x * x;\n}",
        "c_corrupted_implementation": [
            "int square_integer(int x) {\n    return x + x;\n}",
            "int square_integer(int x) {\n    return x - x;\n}",
            "int square_integer(int x) {\n    return x / (1 + x);\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address multiplied by 3.",
        "verbosity": "medium",
        "function_name": "triple_pointed_value",
        "c_implementation": "int triple_pointed_value(int* p) {\n    return *p * 3;\n}",
        "c_corrupted_implementation": [
            "int triple_pointed_value(int* p) {\n    return *p + 3;\n}",
            "int triple_pointed_value(int* p) {\n    return *p / 2;\n}",
            "int triple_pointed_value(int* p) {\n    return *p - 3;\n}"
        ]
    },
    {
        "description": "This program takes two integers `x` and `y` and returns `x` shifted left by `y` bits.",
        "verbosity": "medium",
        "function_name": "shift_left_by_y",
        "c_implementation": "int shift_left_by_y(int x, int y) {\n    return x << y;\n}",
        "c_corrupted_implementation": [
            "int shift_left_by_y(int x, int y) {\n    return x >> y;\n}",
            "int shift_left_by_y(int x, int y) {\n    return x + y;\n}",
            "int shift_left_by_y(int x, int y) {\n    return x ^ y;\n}"
        ]
    },
    {
        "description": "Returns `a-b`.",
        "verbosity": "low",
        "function_name": "subtract_b_from_a",
        "c_implementation": "int subtract_b_from_a(int a, int b) {\n    return a - b;\n}",
        "c_corrupted_implementation": [
            "int subtract_b_from_a(int a, int b) {\n    return a + b;\n}",
            "int subtract_b_from_a(int a, int b) {\n    return a * b + 1;\n}",
            "int subtract_b_from_a(int a, int b) {\n    return a + 1 / b;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and calculates `(a*a) + (b*b)`.",
        "verbosity": "medium",
        "function_name": "calculate_sum_of_squares",
        "c_implementation": "int calculate_sum_of_squares(int a, int b) {\n    return (a * a) + (b * b);\n}",
        "c_corrupted_implementation": [
            "int calculate_sum_of_squares(int a, int b) {\n    return (a * b) + (a * b);\n}",
            "int calculate_sum_of_squares(int a, int b) {\n    return (a - b) + (a - b);\n}",
            "int calculate_sum_of_squares(int a, int b) {\n    return (a + a) - (a * b);\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, decrements the value at `*p`.",
        "verbosity": "low",
        "function_name": "decrement_at_pointer",
        "c_implementation": "void decrement_at_pointer(int* p) {\n    *p = *p - 1;\n}",
        "c_corrupted_implementation": [
            "void decrement_at_pointer(int* p) {\n    *p = 1 - *p;\n}",
            "void decrement_at_pointer(int* p) {\n    *p = 1;\n}",
            "void decrement_at_pointer(int* p) {\n    *p = *p;\n}"
        ]
    },
    {
        "description": "The function's purpose is to take three integer inputs, `a`, `b`, and `c`, and find their sum. It performs the addition `a + b + c` and returns the final integer result.",
        "verbosity": "high",
        "function_name": "add_three_integers",
        "c_implementation": "int add_three_integers(int a, int b, int c) {\n    return a + b + c;\n}",
        "c_corrupted_implementation": [
            "int add_three_integers(int a, int b, int c) {\n    return a * b * c;\n}",
            "int add_three_integers(int a, int b, int c) {\n    return a - b * c;\n}",
            "int add_three_integers(int a, int b, int c) {\n    return (a * b + 1) / c;\n}"
        ]
    },
    {
        "description": "Returns `x*y+z` for three integers.",
        "verbosity": "low",
        "function_name": "multiply_and_add_three_alt",
        "c_implementation": "int multiply_and_add_three_alt(int x, int y, int z) {\n    return x * y + z;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_add_three_alt(int x, int y, int z) {\n    return x + y * z;\n}",
            "int multiply_and_add_three_alt(int x, int y, int z) {\n    return x - y * z;\n}",
            "int multiply_and_add_three_alt(int x, int y, int z) {\n    return x / y / z;\n}"
        ]
    },
    {
        "description": "This program takes a single integer `x` and returns its bitwise complement.",
        "verbosity": "medium",
        "function_name": "get_complement",
        "c_implementation": "int get_complement(int x) {\n    return ~x;\n}",
        "c_corrupted_implementation": [
            "int get_complement(int x) {\n    return -x;\n}",
            "int get_complement(int x) {\n    return -x + 1;\n}",
            "int get_complement(int x) {\n    return x / x;\n}"
        ]
    },
    {
        "description": "Returns `x+y`.",
        "verbosity": "low",
        "function_name": "add_x_y",
        "c_implementation": "int add_x_y(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int add_x_y(int x, int y) {\n    return x & y;\n}",
            "int add_x_y(int x, int y) {\n    return x ^ y + 1;\n}",
            "int add_x_y(int x, int y) {\n    return x / y;\n}"
        ]
    },
    {
        "description": "The function takes a pointer to an integer `p` and returns the value at the memory location `p` points to.",
        "verbosity": "medium",
        "function_name": "get_value_at_pointer",
        "c_implementation": "int get_value_at_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_at_pointer(int* p) {\n    return (int)p;\n}",
            "int get_value_at_pointer(int* p) {\n    return 0;\n}",
            "int get_value_at_pointer(int* p) {\n    return *NULL;\n}"
        ]
    },
    {
        "description": "Given two integers `x` and `y`, returns `(x+y)*2`.",
        "verbosity": "medium",
        "function_name": "sum_and_double",
        "c_implementation": "int sum_and_double(int x, int y) {\n    return (x + y) * 2;\n}",
        "c_corrupted_implementation": [
            "int sum_and_double(int x, int y) {\n    return x + (y * 2);\n}",
            "int sum_and_double(int x, int y) {\n    return x + (y + 1);\n}",
            "int sum_and_double(int x, int y) {\n    return x * y - (3 * 5);\n}"
        ]
    },
    {
        "description": "Returns the memory address of integer `x`.",
        "verbosity": "low",
        "function_name": "address_of",
        "c_implementation": "int* address_of(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* address_of(int* x) {\n    return x-1;\n}",
            "int* address_of(int* x) {\n    return x + x;\n}",
            "int* address_of(int* x) {\n    return 2 * x;\n}"
        ]
    },
    {
        "description": "This function takes two integer pointers, `p1` and `p2`, and returns the difference of the values they point to.",
        "verbosity": "medium",
        "function_name": "difference_of_pointers",
        "c_implementation": "int difference_of_pointers(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
        "c_corrupted_implementation": [
            "int difference_of_pointers(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int difference_of_pointers(int* p1, int* p2) {\n    return *p1 * *p2 + 1;\n}",
            "int difference_of_pointers(int* p1, int* p2) {\n    return *p1 / *p2;\n}"
        ]
    },
    {
        "description": "The function's purpose is to swap the integer values stored at two memory locations, which are provided via pointers. It accepts two pointers to integers, `ptr_a` and `ptr_b`. It then uses a temporary variable and pointer dereferencing to exchange the values at these two addresses.",
        "verbosity": "high",
        "function_name": "pointer_based_swap",
        "c_implementation": "void pointer_based_swap(int* ptr_a, int* ptr_b) {\n    int temp = *ptr_a;\n    *ptr_a = *ptr_b;\n    *ptr_b = temp;\n}",
        "c_corrupted_implementation": [
            "void pointer_based_swap(int* ptr_a, int* ptr_b) {\n    *ptr_a = *ptr_b;\n    *ptr_b = *ptr_a;\n}",
            "void pointer_based_swap(int* ptr_a, int* ptr_b) {\n    *ptr_a = *ptr_b + 1;\n    *ptr_b = *ptr_a - 1;\n}",
            "void pointer_based_swap(int* ptr_a, int* ptr_b) {\n    *ptr_a = *ptr_a + *ptr_b;\n    *ptr_b = *ptr_b;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x` right-shifted by 1 bit.",
        "verbosity": "low",
        "function_name": "right_shift_one",
        "c_implementation": "int right_shift_one(int x) {\n    return x >> 1;\n}",
        "c_corrupted_implementation": [
            "int right_shift_one(int x) {\n    return x << 1;\n}",
            "int right_shift_one(int x) {\n    return x + 2;\n}",
            "int right_shift_one(int x) {\n    return x - 1;\n}"
        ]
    },
    {
        "description": "The program takes two integers, `a` and `b`, and returns their product.",
        "verbosity": "medium",
        "function_name": "return_product",
        "c_implementation": "int return_product(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int return_product(int a, int b) {\n    return a / b;\n}",
            "int return_product(int a, int b) {\n    return a + 1 ^ b;\n}",
            "int return_product(int a, int b) {\n    return a & b;\n}"
        ]
    },
    {
        "description": "Returns `(a*b) / c`.",
        "verbosity": "low",
        "function_name": "mult_div",
        "c_implementation": "int mult_div(int a, int b, int c) {\n    return (a * b) / c;\n}",
        "c_corrupted_implementation": [
            "int mult_div(int a, int b, int c) {\n    return a * (b / c);\n}",
            "int mult_div(int a, int b, int c) {\n    return a * b * c;\n}",
            "int mult_div(int a, int b, int c) {\n    return a * (b + c);\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p_val`. It retrieves the integer value from the memory location `p_val` points to, and then returns the bitwise complement (NOT) of that value.",
        "verbosity": "high",
        "function_name": "get_complemented_pointer_value",
        "c_implementation": "int get_complemented_pointer_value(int* p_val) {\n    return ~(*p_val);\n}",
        "c_corrupted_implementation": [
            "int get_complemented_pointer_value(int* p_val) {\n    return *p_val;\n}",
            "int get_complemented_pointer_value(int* p_val) {\n    return *p_val + 1;\n}",
            "int get_complemented_pointer_value(int* p_val) {\n    return *p_val / 2;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns the value of the integer it points to.",
        "verbosity": "medium",
        "function_name": "get_int_from_pointer",
        "c_implementation": "int get_int_from_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_int_from_pointer(int* p) {\n    return (int)p;\n}",
            "int get_int_from_pointer(int* p) {\n    return NULL;\n}",
            "int get_int_from_pointer(int* p) {\n    return 0;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p * 2`.",
        "verbosity": "low",
        "function_name": "double_val_at_p",
        "c_implementation": "int double_val_at_p(int* p) {\n    return *p * 2;\n}",
        "c_corrupted_implementation": [
            "int double_val_at_p(int* p) {\n    return *p + 2;\n}",
            "int double_val_at_p(int* p) {\n    return *p / 2;\n}",
            "int double_val_at_p(int* p) {\n    return *p ^ *p;\n}"
        ]
    },
    {
        "description": "The function's purpose is to add two numbers together. It takes two integer inputs, `num1` and `num2`. It then calculates their sum and returns the resulting integer. For example, an input of 5 and 10 would result in an output of 15.",
        "verbosity": "high",
        "function_name": "sum_two_integers",
        "c_implementation": "int sum_two_integers(int num1, int num2) {\n    return num1 + num2;\n}",
        "c_corrupted_implementation": [
            "int sum_two_integers(int num1, int num2) {\n    return num1 * num2;\n}",
            "int sum_two_integers(int num1, int num2) {\n    return num1 / 3 * num2;\n}",
            "int sum_two_integers(int num1, int num2) {\n    return num1 - num2;\n}"
        ]
    },
    {
        "description": "Returns `x|y`.",
        "verbosity": "low",
        "function_name": "or_x_y",
        "c_implementation": "int or_x_y(int x, int y) {\n    return x | y;\n}",
        "c_corrupted_implementation": [
            "int or_x_y(int x, int y) {\n    return x & y;\n}",
            "int or_x_y(int x, int y) {\n    return x / y;\n}",
            "int or_x_y(int x, int y) {\n    return x * y;\n}"
        ]
    },
    {
        "description": "This program takes three integers, `a`, `b`, and `c`, and returns `(a+b)-c`.",
        "verbosity": "medium",
        "function_name": "add_and_subtract_three",
        "c_implementation": "int add_and_subtract_three(int a, int b, int c) {\n    return (a + b) - c;\n}",
        "c_corrupted_implementation": [
            "int add_and_subtract_three(int a, int b, int c) {\n    return a + (b - c);\n}",
            "int add_and_subtract_three(int a, int b, int c) {\n    return a - (b + c);\n}",
            "int add_and_subtract_three(int a, int b, int c) {\n    return a / (b * c);\n}"
        ]
    },
    {
        "description": "Given a pointer `p` and an integer `x`, sets `*p` to `x`.",
        "verbosity": "low",
        "function_name": "set_p_to_x",
        "c_implementation": "void set_p_to_x(int* p, int x) {\n    *p = x;\n}",
        "c_corrupted_implementation": [
            "void set_p_to_x(int* p, int x) {\n    p = &x;\n}",
            "void set_p_to_x(int* p, int x) {\n    p = 1;\n}",
            "void set_p_to_x(int* p, int x) {\n    p += x * 2;\n}"
        ]
    },
    {
        "description": "This function takes two integers, `x` and `y`, and returns their bitwise AND.",
        "verbosity": "medium",
        "function_name": "and_two_integers",
        "c_implementation": "int and_two_integers(int x, int y) {\n    return x & y;\n}",
        "c_corrupted_implementation": [
            "int and_two_integers(int x, int y) {\n    return x ^ y;\n}",
            "int and_two_integers(int x, int y) {\n    return x / y;\n}",
            "int and_two_integers(int x, int y) {\n    return x * y + 1;\n}"
        ]
    },
    {
        "description": "Returns `(x-y)*z`.",
        "verbosity": "low",
        "function_name": "sub_and_mult",
        "c_implementation": "int sub_and_mult(int x, int y, int z) {\n    return (x - y) * z;\n}",
        "c_corrupted_implementation": [
            "int sub_and_mult(int x, int y, int z) {\n    return x - (y * z);\n}",
            "int sub_and_mult(int x, int y, int z) {\n    return x + (y - z);\n}",
            "int sub_and_mult(int x, int y, int z) {\n    return x / (y + z);\n}"
        ]
    },
    {
        "description": "The program takes two integer pointers, `p_a` and `p_b`. It swaps the values stored in the memory locations they point to using the XOR swap algorithm, which avoids the need for a temporary variable.",
        "verbosity": "medium",
        "function_name": "xor_swap",
        "c_implementation": "void xor_swap(int* p_a, int* p_b) {\n    *p_a = *p_a ^ *p_b;\n    *p_b = *p_a ^ *p_b;\n    *p_a = *p_a ^ *p_b;\n}",
        "c_corrupted_implementation": [
            "void xor_swap(int* p_a, int* p_b) {\n    *p_a = *p_a ^ *p_b;\n    *p_b = *p_a ^ *p_b;\n    *p_a = *p_a & *p_b;\n}",
            "void xor_swap(int* p_a, int* p_b) {\n    *p_a = *p_a + *p_b;\n    *p_b = *p_a - *p_b;\n    *p_a = *p_a / *p_b;\n}",
            "void xor_swap(int* p_a, int* p_b) {\n    *p_a = *p_a / *p_b;\n    *p_b = *p_a * *p_b;\n    *p_a = *p_a * *p_b;\n}"
        ]
    },
    {
        "description": "The function's purpose is to subtract one number from another. It takes two integer inputs, a minuend and a subtrahend. It calculates the difference between them and returns the result. For instance, if the minuend is 20 and the subtrahend is 8, it returns 12.",
        "verbosity": "high",
        "function_name": "detailed_subtraction",
        "c_implementation": "int detailed_subtraction(int minuend, int subtrahend) {\n    return minuend - subtrahend;\n}",
        "c_corrupted_implementation": [
            "int detailed_subtraction(int minuend, int subtrahend) {\n    return minuend + subtrahend;\n}",
            "int detailed_subtraction(int minuend, int subtrahend) {\n    return 1 - (minuend * subtrahend);\n}",
            "int detailed_subtraction(int minuend, int subtrahend) {\n    return minuend / subtrahend;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x`.",
        "verbosity": "low",
        "function_name": "return_x",
        "c_implementation": "int return_x(int x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int return_x(int x) {\n    return 0;\n}",
            "int return_x(int x) {\n    return 1 ^ 0;\n}",
            "int return_x(int x) {\n    return ~x + 1;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address plus 5.",
        "verbosity": "medium",
        "function_name": "get_val_plus_5",
        "c_implementation": "int get_val_plus_5(int* p) {\n    return *p + 5;\n}",
        "c_corrupted_implementation": [
            "int get_val_plus_5(int* p) {\n    return *p * 5;\n}",
            "int get_val_plus_5(int* p) {\n    return (*p + 1) / 4;\n}",
            "int get_val_plus_5(int* p) {\n    return (*p - 1) * 2;\n}"
        ]
    },
    {
        "description": "This program takes a single integer `x` and returns `x` divided by 2.",
        "verbosity": "medium",
        "function_name": "halve_integer",
        "c_implementation": "int halve_integer(int x) {\n    return x / 2;\n}",
        "c_corrupted_implementation": [
            "int halve_integer(int x) {\n    return x * 2;\n}",
            "int halve_integer(int x) {\n    return x;\n}",
            "int halve_integer(int x) {\n    return 4 * x;\n}"
        ]
    },
    {
        "description": "Returns `x*y`.",
        "verbosity": "low",
        "function_name": "mult_x_y",
        "c_implementation": "int mult_x_y(int x, int y) {\n    return x * y;\n}",
        "c_corrupted_implementation": [
            "int mult_x_y(int x, int y) {\n    return x - y;\n}",
            "int mult_x_y(int x, int y) {\n    return x + y + 5;\n}",
            "int mult_x_y(int x, int y) {\n    return x / 2 + y;\n}"
        ]
    },
    {
        "description": "This function takes two integers, `a` and `b`, and returns the result of `a * (a+b)`.",
        "verbosity": "medium",
        "function_name": "mult_by_sum",
        "c_implementation": "int mult_by_sum(int a, int b) {\n    return a * (a + b);\n}",
        "c_corrupted_implementation": [
            "int mult_by_sum(int a, int b) {\n    return (a * a) + b;\n}",
            "int mult_by_sum(int a, int b) {\n    return (a + a) - b;\n}",
            "int mult_by_sum(int a, int b) {\n    return (a * b) / (b + 1);\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p - 10`.",
        "verbosity": "low",
        "function_name": "get_val_minus_10",
        "c_implementation": "int get_val_minus_10(int* p) {\n    return *p - 10;\n}",
        "c_corrupted_implementation": [
            "int get_val_minus_10(int* p) {\n    return 10 - *p;\n}",
            "int get_val_minus_10(int* p) {\n    return 2 * 5 + *p;\n}",
            "int get_val_minus_10(int* p) {\n    return 1 - *p;\n}"
        ]
    },
    {
        "description": "The function's purpose is to multiply two numbers. It accepts two integers as its parameters. It then calculates their product and returns the final integer result. For example, providing 4 and 5 as input will yield an output of 20.",
        "verbosity": "high",
        "function_name": "multiply_two_numbers",
        "c_implementation": "int multiply_two_numbers(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int multiply_two_numbers(int a, int b) {\n    return a + b;\n}",
            "int multiply_two_numbers(int a, int b) {\n    return a + 1 - b;\n}",
            "int multiply_two_numbers(int a, int b) {\n    return a - b;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns its memory address.",
        "verbosity": "medium",
        "function_name": "get_pointer_itself",
        "c_implementation": "int* get_pointer_itself(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* get_pointer_itself(int* p) {\n    return p + 1;\n}",
            "int* get_pointer_itself(int* p) {\n    return *p + 4;\n}",
            "int* get_pointer_itself(int* p) {\n    return *p;\n}"
        ]
    },
    {
        "description": "Returns `x/y`.",
        "verbosity": "low",
        "function_name": "div_x_y",
        "c_implementation": "int div_x_y(int x, int y) {\n    return x / y;\n}",
        "c_corrupted_implementation": [
            "int div_x_y(int x, int y) {\n    return y / x;\n}",
            "int div_x_y(int x, int y) {\n    return y + x;\n}",
            "int div_x_y(int x, int y) {\n    return y * x;\n}"
        ]
    },
    {
        "description": "The program takes two integer pointers, `p_a` and `p_b`. It calculates the sum of the values they point to and returns the result.",
        "verbosity": "medium",
        "function_name": "sum_pointed_by",
        "c_implementation": "int sum_pointed_by(int* p_a, int* p_b) {\n    return *p_a + *p_b;\n}",
        "c_corrupted_implementation": [
            "int sum_pointed_by(int* p_a, int* p_b) {\n    return *p_a * *p_b;\n}",
            "int sum_pointed_by(int* p_a, int* p_b) {\n    return *p_a - *p_b;\n}",
            "int sum_pointed_by(int* p_a, int* p_b) {\n    return *p_b / *p_a;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p` and a value `v`. It updates the memory location pointed to by `p` with the new value `v`.",
        "verbosity": "high",
        "function_name": "update_value_at_pointer",
        "c_implementation": "void update_value_at_pointer(int* p, int v) {\n    *p = v;\n}",
        "c_corrupted_implementation": [
            "void update_value_at_pointer(int* p, int v) {\n    *p = *p + v;\n}",
            "void update_value_at_pointer(int* p, int v) {\n    p = *p - v;\n}",
            "void update_value_at_pointer(int* p, int v) {\n    *p = p * v;\n}"
        ]
    },
    {
        "description": "This program takes an integer `x` and returns `x` multiplied by 10.",
        "verbosity": "medium",
        "function_name": "multiply_by_ten",
        "c_implementation": "int multiply_by_ten(int x) {\n    return x * 10;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_ten(int x) {\n    return x + 10;\n}",
            "int multiply_by_ten(int x) {\n    return x / 4;\n}",
            "int multiply_by_ten(int x) {\n    return x - 1;\n}"
        ]
    },
    {
        "description": "Returns `x<<y`.",
        "verbosity": "low",
        "function_name": "lshift_x_y",
        "c_implementation": "int lshift_x_y(int x, int y) {\n    return x << y;\n}",
        "c_corrupted_implementation": [
            "int lshift_x_y(int x, int y) {\n    return x >> y;\n}",
            "int lshift_x_y(int x, int y) {\n    return x + y;\n}",
            "int lshift_x_y(int x, int y) {\n    return y / x;\n}"
        ]
    },
    {
        "description": "The function's purpose is to find the remainder of an integer division, a process also known as the modulo operation. It takes two integer arguments, a dividend and a divisor. It computes the remainder that is left after dividing the dividend by the divisor and returns this integer value.",
        "verbosity": "high",
        "function_name": "detailed_modulo",
        "c_implementation": "int detailed_modulo(int dividend, int divisor) {\n    return dividend % divisor;\n}",
        "c_corrupted_implementation": [
            "int detailed_modulo(int dividend, int divisor) {\n    return dividend / divisor;\n}",
            "int detailed_modulo(int dividend, int divisor) {\n    return dividend + divisor;\n}",
            "int detailed_modulo(int dividend, int divisor) {\n    return dividend ^ divisor;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and an integer `x`. It updates the value at `p` to be `x`.",
        "verbosity": "medium",
        "function_name": "set_pointer_val_to_x",
        "c_implementation": "void set_pointer_val_to_x(int* p, int x) {\n    *p = x;\n}",
        "c_corrupted_implementation": [
            "void set_pointer_val_to_x(int* p, int x) {\n    *p = *p + x;\n}",
            "void set_pointer_val_to_x(int* p, int x) {\n    *p = p + x;\n}",
            "void set_pointer_val_to_x(int* p, int x) {\n    *p = *p / x + 1;\n}"
        ]
    },
    {
        "description": "This function takes an integer `x` and returns its negative value.",
        "verbosity": "medium",
        "function_name": "get_negative",
        "c_implementation": "int get_negative(int x) {\n    return -x;\n}",
        "c_corrupted_implementation": [
            "int get_negative(int x) {\n    return x - 1;\n}",
            "int get_negative(int x) {\n    return x + 3;\n}",
            "int get_negative(int x) {\n    return x % 2;\n}"
        ]
    },
    {
        "description": "Returns `x&y`.",
        "verbosity": "low",
        "function_name": "and_x_y",
        "c_implementation": "int and_x_y(int x, int y) {\n    return x & y;\n}",
        "c_corrupted_implementation": [
            "int and_x_y(int x, int y) {\n    return x | y;\n}",
            "int and_x_y(int x, int y) {\n    return x / y;\n}",
            "int and_x_y(int x, int y) {\n    return x ^ y + 2;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns `a*a - b`.",
        "verbosity": "medium",
        "function_name": "square_and_subtract",
        "c_implementation": "int square_and_subtract(int a, int b) {\n    return a * a - b;\n}",
        "c_corrupted_implementation": [
            "int square_and_subtract(int a, int b) {\n    return a * (a - b);\n}",
            "int square_and_subtract(int a, int b) {\n    return a + a + b;\n}",
            "int square_and_subtract(int a, int b) {\n    return NULL;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p` shifted left by 2.",
        "verbosity": "low",
        "function_name": "get_val_lshift_2",
        "c_implementation": "int get_val_lshift_2(int* p) {\n    return *p << 2;\n}",
        "c_corrupted_implementation": [
            "int get_val_lshift_2(int* p) {\n    return *p >> 2;\n}",
            "int get_val_lshift_2(int* p) {\n    return *p + 1;\n}",
            "int get_val_lshift_2(int* p) {\n    return p - 1;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise AND operation. It is given two integer values. It compares each bit of the first integer to the corresponding bit of the second integer. If both bits are 1, the resulting bit is 1; otherwise, it is 0. The function returns the final integer composed of these resulting bits.",
        "verbosity": "high",
        "function_name": "compute_bitwise_and",
        "c_implementation": "int compute_bitwise_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int compute_bitwise_and(int a, int b) {\n    return a + b;\n}",
            "int compute_bitwise_and(int a, int b) {\n    return a - b;\n}",
            "int compute_bitwise_and(int a, int b) {\n    return a / b;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address.",
        "verbosity": "medium",
        "function_name": "read_from_pointer",
        "c_implementation": "int read_from_pointer(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int read_from_pointer(int* p) {\n    return (int)p;\n}",
            "int read_from_pointer(int* p) {\n    return (int)p + 1;\n}",
            "int read_from_pointer(int* p) {\n    return p - 1;\n}"
        ]
    },
    {
        "description": "Returns `x^y`.",
        "verbosity": "low",
        "function_name": "xor_x_y",
        "c_implementation": "int xor_x_y(int x, int y) {\n    return x ^ y;\n}",
        "c_corrupted_implementation": [
            "int xor_x_y(int x, int y) {\n    return x | y;\n}",
            "int xor_x_y(int x, int y) {\n    return x & (y + 1);\n}",
            "int xor_x_y(int x, int y) {\n    return x / (y - x);\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p` and an integer `x`. It sets the value at the memory location pointed to by `p` to the value of `x`.",
        "verbosity": "high",
        "function_name": "set_value_at_pointer",
        "c_implementation": "void set_value_at_pointer(int* p, int x) {\n    *p = x;\n}",
        "c_corrupted_implementation": [
            "void set_value_at_pointer(int* p, int x) {\n    p = &x;\n}",
            "void set_value_at_pointer(int* p, int x) {\n    p = x;\n}",
            "void set_value_at_pointer(int* p, int x) {\n    p = x + 1;\n}"
        ]
    },
    {
        "description": "Given two integer pointers `p1` and `p2`, returns the sum of the values they point to.",
        "verbosity": "low",
        "function_name": "sum_pointed_vals",
        "c_implementation": "int sum_pointed_vals(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
        "c_corrupted_implementation": [
            "int sum_pointed_vals(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
            "int sum_pointed_vals(int* p1, int* p2) {\n    return *p1 * *p2;\n}",
            "int sum_pointed_vals(int* p1, int* p2) {\n    return *p1 & *p2;\n}"
        ]
    },
    {
        "description": "This program takes three integers `a, b, c` and returns `a + b*c`.",
        "verbosity": "medium",
        "function_name": "add_and_multiply_three",
        "c_implementation": "int add_and_multiply_three(int a, int b, int c) {\n    return a + b * c;\n}",
        "c_corrupted_implementation": [
            "int add_and_multiply_three(int a, int b, int c) {\n    return (a + b) * c;\n}",
            "int add_and_multiply_three(int a, int b, int c) {\n    return (a - b) + c;\n}",
            "int add_and_multiply_three(int a, int b, int c) {\n    return (a + c) * b;\n}"
        ]
    },
    {
        "description": "Returns `x+y+z`.",
        "verbosity": "low",
        "function_name": "sum_three",
        "c_implementation": "int sum_three(int x, int y, int z) {\n    return x + y + z;\n}",
        "c_corrupted_implementation": [
            "int sum_three(int x, int y, int z) {\n    return x * y * z;\n}",
            "int sum_three(int x, int y, int z) {\n    return x - y + z;\n}",
            "int sum_three(int x, int y, int z) {\n    return x ^ y / z;\n}"
        ]
    },
    {
        "description": "The function's purpose is to get the value stored at a memory address. It takes a pointer to an integer as its only argument. It then dereferences this pointer to access the integer value it points to and returns that value.",
        "verbosity": "high",
        "function_name": "get_value_at_address",
        "c_implementation": "int get_value_at_address(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_at_address(int* p) {\n    return 0;\n}",
            "int get_value_at_address(int* p) {\n    return 1 + p;\n}",
            "int get_value_at_address(int* p) {\n    return 2 / p;\n}"
        ]
    },
    {
        "description": "This function takes two integers `x` and `y` and returns `x` divided by `y`.",
        "verbosity": "medium",
        "function_name": "divide_integers",
        "c_implementation": "int divide_integers(int x, int y) {\n    return x / y;\n}",
        "c_corrupted_implementation": [
            "int divide_integers(int x, int y) {\n    return y / x;\n}",
            "int divide_integers(int x, int y) {\n    return y - x;\n}",
            "int divide_integers(int x, int y) {\n    return y & x;\n}"
        ]
    },
    {
        "description": "Returns `(x*x*x)`.",
        "verbosity": "low",
        "function_name": "cube_integer",
        "c_implementation": "int cube_integer(int x) {\n    return x * x * x;\n}",
        "c_corrupted_implementation": [
            "int cube_integer(int x) {\n    return x + x + x;\n}",
            "int cube_integer(int x) {\n    return x - x & x;\n}",
            "int cube_integer(int x) {\n    return x * x ^ x;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address multiplied by itself.",
        "verbosity": "medium",
        "function_name": "square_pointed_val",
        "c_implementation": "int square_pointed_val(int* p) {\n    return (*p) * (*p);\n}",
        "c_corrupted_implementation": [
            "int square_pointed_val(int* p) {\n    return (*p) + (*p);\n}",
            "int square_pointed_val(int* p) {\n    return (*p) - 1 + (*p);\n}",
            "int square_pointed_val(int* p) {\n    return (*p) + 2 / (*p);\n}"
        ]
    },
    {
        "description": "Returns `x>>y`.",
        "verbosity": "low",
        "function_name": "rshift_x_y",
        "c_implementation": "int rshift_x_y(int x, int y) {\n    return x >> y;\n}",
        "c_corrupted_implementation": [
            "int rshift_x_y(int x, int y) {\n    return x << y;\n}",
            "int rshift_x_y(int x, int y) {\n    return x - y;\n}",
            "int rshift_x_y(int x, int y) {\n    return x + 2 / y;\n}"
        ]
    },
    {
        "description": "The function's purpose is to provide the memory address where a variable is stored. It accepts a single integer as its input. It then determines the memory address of this integer and returns it as a pointer.",
        "verbosity": "high",
        "function_name": "find_memory_address",
        "c_implementation": "int* find_memory_address(int* n) {\n    return n;\n}",
        "c_corrupted_implementation": [
            "int* find_memory_address(int* n) {\n    return n + 1;\n}",
            "int* find_memory_address(int* n) {\n    return n / 2;\n}",
            "int* find_memory_address(int* n) {\n    return n % 3;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns their sum.",
        "verbosity": "low",
        "function_name": "sum_a_b",
        "c_implementation": "int sum_a_b(int a, int b) {\n    return a + b;\n}",
        "c_corrupted_implementation": [
            "int sum_a_b(int a, int b) {\n    return a * b;\n}",
            "int sum_a_b(int a, int b) {\n    return a * 1 + *b;\n}",
            "int sum_a_b(int a, int b) {\n    return a - b;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address minus 1.",
        "verbosity": "medium",
        "function_name": "get_pointed_val_minus_one",
        "c_implementation": "int get_pointed_val_minus_one(int* p) {\n    return *p - 1;\n}",
        "c_corrupted_implementation": [
            "int get_pointed_val_minus_one(int* p) {\n    return *p + 1;\n}",
            "int get_pointed_val_minus_one(int* p) {\n    return *p * 2;\n}",
            "int get_pointed_val_minus_one(int* p) {\n    return p - 1;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p / 4` using bit shifts.",
        "verbosity": "low",
        "function_name": "div_4_shift",
        "c_implementation": "int div_4_shift(int* p) {\n    return *p >> 2;\n}",
        "c_corrupted_implementation": [
            "int div_4_shift(int* p) {\n    return *p << 2;\n}",
            "int div_4_shift(int* p) {\n    return *p - 4;\n}",
            "int div_4_shift(int* p) {\n    return *p + 1;\n}"
        ]
    },
    {
        "description": "This program takes two integers `x` and `y` and returns their bitwise OR.",
        "verbosity": "medium",
        "function_name": "or_two_integers",
        "c_implementation": "int or_two_integers(int x, int y) {\n    return x | y;\n}",
        "c_corrupted_implementation": [
            "int or_two_integers(int x, int y) {\n    return x ^ y;\n}",
            "int or_two_integers(int x, int y) {\n    return x / (y + 1);\n}",
            "int or_two_integers(int x, int y) {\n    return x + y;\n}"
        ]
    },
    {
        "description": "Returns `x%y`.",
        "verbosity": "low",
        "function_name": "mod_x_y",
        "c_implementation": "int mod_x_y(int x, int y) {\n    return x % y;\n}",
        "c_corrupted_implementation": [
            "int mod_x_y(int x, int y) {\n    return x & y;\n}",
            "int mod_x_y(int x, int y) {\n    return x / y;\n}",
            "int mod_x_y(int x, int y) {\n    return x ^ y;\n}"
        ]
    },
    {
        "description": "This function takes three integers `a, b, c` and returns `(a-b)*c`.",
        "verbosity": "medium",
        "function_name": "subtract_and_multiply",
        "c_implementation": "int subtract_and_multiply(int a, int b, int c) {\n    return (a - b) * c;\n}",
        "c_corrupted_implementation": [
            "int subtract_and_multiply(int a, int b, int c) {\n    return a - (b * c);\n}",
            "int subtract_and_multiply(int a, int b, int c) {\n    return a + (b - c);\n}",
            "int subtract_and_multiply(int a, int b, int c) {\n    return a + b + c;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise complement, or NOT, operation. It takes a single integer as input. It then inverts all the bits in that integer, changing 1s to 0s and 0s to 1s, and returns the resulting integer.",
        "verbosity": "high",
        "function_name": "detailed_bitwise_not",
        "c_implementation": "int detailed_bitwise_not(int n) {\n    return ~n;\n}",
        "c_corrupted_implementation": [
            "int detailed_bitwise_not(int n) {\n    return n ^ -1;\n}",
            "int detailed_bitwise_not(int n) {\n    return n / 2;\n}",
            "int detailed_bitwise_not(int n) {\n    return n & 3;\n}"
        ]
    },
    {
        "description": "The program takes a pointer to an integer `p` and an integer `x`. It returns 1 if the value at `p` is equal to `x`, and 0 otherwise.",
        "verbosity": "medium",
        "function_name": "is_pointed_value_equal",
        "c_implementation": "int is_pointed_value_equal(int* p, int x) {\n    return *p == x;\n}",
        "c_corrupted_implementation": [
            "int is_pointed_value_equal(int* p, int x) {\n    return *p != x;\n}",
            "int is_pointed_value_equal(int* p, int x) {\n    return *p + x;\n}",
            "int is_pointed_value_equal(int* p, int x) {\n    return *p - x;\n}"
        ]
    },
    {
        "description": "Returns `x+x`.",
        "verbosity": "low",
        "function_name": "double_x",
        "c_implementation": "int double_x(int x) {\n    return x + x;\n}",
        "c_corrupted_implementation": [
            "int double_x(int x) {\n    return x * x;\n}",
            "int double_x(int x) {\n    return x / x;\n}",
            "int double_x(int x) {\n    return x * 2;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p`. It modifies the value at the memory location `p` by multiplying it by itself, effectively squaring it.",
        "verbosity": "high",
        "function_name": "square_value_at_pointer",
        "c_implementation": "void square_value_at_pointer(int* p) {\n    *p = (*p) * (*p);\n}",
        "c_corrupted_implementation": [
            "void square_value_at_pointer(int* p) {\n    *p = (*p) + (*p);\n}",
            "void square_value_at_pointer(int* p) {\n    *p = (*p) * 2;\n}",
            "void square_value_at_pointer(int* p) {\n    p = (*p);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x-1`.",
        "verbosity": "low",
        "function_name": "decrement_x",
        "c_implementation": "int decrement_x(int x) {\n    return x - 1;\n}",
        "c_corrupted_implementation": [
            "int decrement_x(int x) {\n    return x + 1;\n}",
            "int decrement_x(int x) {\n    return x / 4;\n}",
            "int decrement_x(int x) {\n    return x * 2;\n}"
        ]
    },
    {
        "description": "This function takes two integers `x` and `y` and returns their product.",
        "verbosity": "medium",
        "function_name": "multiply_integers",
        "c_implementation": "int multiply_integers(int x, int y) {\n    return x * y;\n}",
        "c_corrupted_implementation": [
            "int multiply_integers(int x, int y) {\n    return x + y;\n}",
            "int multiply_integers(int x, int y) {\n    return x / y;\n}",
            "int multiply_integers(int x, int y) {\n    return x - y;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p + *p + *p`.",
        "verbosity": "low",
        "function_name": "triple_pointed",
        "c_implementation": "int triple_pointed(int* p) {\n    return *p + *p + *p;\n}",
        "c_corrupted_implementation": [
            "int triple_pointed(int* p) {\n    return *p * *p * *p;\n}",
            "int triple_pointed(int* p) {\n    return *p * *p / *p;\n}",
            "int triple_pointed(int* p) {\n    return *p * *p;\n}"
        ]
    },
    {
        "description": "The program takes two integer pointers `p1` and `p2` and returns the value of `*p1 - *p2`.",
        "verbosity": "medium",
        "function_name": "subtract_pointed_values",
        "c_implementation": "int subtract_pointed_values(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
        "c_corrupted_implementation": [
            "int subtract_pointed_values(int* p1, int* p2) {\n    return *p2 - *p1;\n}",
            "int subtract_pointed_values(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int subtract_pointed_values(int* p1, int* p2) {\n    return *p2 + *p2;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise exclusive OR (XOR) operation. It accepts two integer values. For each bit position, the result bit is 1 if the input bits are different, and 0 if they are the same. The function returns the final integer result.",
        "verbosity": "high",
        "function_name": "detailed_bitwise_xor",
        "c_implementation": "int detailed_bitwise_xor(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int detailed_bitwise_xor(int a, int b) {\n    return a | b;\n}",
            "int detailed_bitwise_xor(int a, int b) {\n    return a / b;\n}",
            "int detailed_bitwise_xor(int a, int b) {\n    return a & b;\n}"
        ]
    },
    {
        "description": "Returns `1`.",
        "verbosity": "low",
        "function_name": "return_one",
        "c_implementation": "int return_one() {\n    return 1;\n}",
        "c_corrupted_implementation": [
            "int return_one() {\n    return 0;\n}",
            "int return_one() {\n    return 2;\n}",
            "int return_one() {\n    return NULL;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address.",
        "verbosity": "medium",
        "function_name": "get_val_from_ptr",
        "c_implementation": "int get_val_from_ptr(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_val_from_ptr(int* p) {\n    return (int)p;\n}",
            "int get_val_from_ptr(int* p) {\n    return p;\n}",
            "int get_val_from_ptr(int* p) {\n    return 5;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p` and an integer `x`. It subtracts `x` from the value stored at the memory location `p` and updates the value at `p` with the result.",
        "verbosity": "high",
        "function_name": "subtract_from_pointer_value",
        "c_implementation": "void subtract_from_pointer_value(int* p, int x) {\n    *p = *p - x;\n}",
        "c_corrupted_implementation": [
            "void subtract_from_pointer_value(int* p, int x) {\n    *p = x - *p;\n}",
            "void subtract_from_pointer_value(int* p, int x) {\n    *p = p;\n}",
            "void subtract_from_pointer_value(int* p, int x) {\n    *p = x;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns `(a-b)*b`.",
        "verbosity": "medium",
        "function_name": "diff_and_mult_by_b",
        "c_implementation": "int diff_and_mult_by_b(int a, int b) {\n    return (a - b) * b;\n}",
        "c_corrupted_implementation": [
            "int diff_and_mult_by_b(int a, int b) {\n    return a - (b * b);\n}",
            "int diff_and_mult_by_b(int a, int b) {\n    return a - b;\n}",
            "int diff_and_mult_by_b(int a, int b) {\n    return b - (b * a);\n}"
        ]
    },
    {
        "description": "Returns `x*8`.",
        "verbosity": "low",
        "function_name": "multiply_by_8",
        "c_implementation": "int multiply_by_8(int x) {\n    return x * 8;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_8(int x) {\n    return x + 8;\n}",
            "int multiply_by_8(int x) {\n    return x - 2;\n}",
            "int multiply_by_8(int x) {\n    return x / 5;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform integer division. It takes two integer arguments, a dividend and a divisor. It calculates how many times the divisor can fully go into the dividend and returns this number as an integer quotient, ignoring any remainder.",
        "verbosity": "high",
        "function_name": "calculate_quotient",
        "c_implementation": "int calculate_quotient(int dividend, int divisor) {\n    return dividend / divisor;\n}",
        "c_corrupted_implementation": [
            "int calculate_quotient(int dividend, int divisor) {\n    return dividend % divisor;\n}",
            "int calculate_quotient(int dividend, int divisor) {\n    return dividend * (1 + divisor);\n}",
            "int calculate_quotient(int dividend, int divisor) {\n    return dividend - divisor;\n}"
        ]
    },
    {
        "description": "This program takes an integer `x` and returns its address in memory.",
        "verbosity": "medium",
        "function_name": "get_memory_address_of",
        "c_implementation": "int* get_memory_address_of(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* get_memory_address_of(int* x) {\n    return x + 1;\n}",
            "int* get_memory_address_of(int* x) {\n    return x - 1;\n}",
            "int* get_memory_address_of(int* x) {\n    return x / 3;\n}"
        ]
    },
    {
        "description": "Returns `x+y-z`.",
        "verbosity": "low",
        "function_name": "add_sub",
        "c_implementation": "int add_sub(int x, int y, int z) {\n    return x + y - z;\n}",
        "c_corrupted_implementation": [
            "int add_sub(int x, int y, int z) {\n    return x - y + z;\n}",
            "int add_sub(int x, int y, int z) {\n    return x + z - 2 * y;\n}",
            "int add_sub(int x, int y, int z) {\n    return x + y + z;\n}"
        ]
    },
    {
        "description": "The program is designed to take a pointer to an integer `p` and an integer `x`. It updates the value at memory location `p` to be the bitwise XOR of its original value and `x`.",
        "verbosity": "high",
        "function_name": "xor_pointer_value",
        "c_implementation": "void xor_pointer_value(int* p, int x) {\n    *p = *p ^ x;\n}",
        "c_corrupted_implementation": [
            "void xor_pointer_value(int* p, int x) {\n    *p = *p & x;\n}",
            "void xor_pointer_value(int* p, int x) {\n    *p = *p / x;\n}",
            "void xor_pointer_value(int* p, int x) {\n    *p = x;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns their difference.",
        "verbosity": "low",
        "function_name": "diff_a_b",
        "c_implementation": "int diff_a_b(int a, int b) {\n    return a - b;\n}",
        "c_corrupted_implementation": [
            "int diff_a_b(int a, int b) {\n    return b - a;\n}",
            "int diff_a_b(int a, int b) {\n    return a * b;\n}",
            "int diff_a_b(int a, int b) {\n    return b / a;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns `*p + 1`.",
        "verbosity": "medium",
        "function_name": "get_val_plus_one",
        "c_implementation": "int get_val_plus_one(int* p) {\n    return *p + 1;\n}",
        "c_corrupted_implementation": [
            "int get_val_plus_one(int* p) {\n    return *p - 1;\n}",
            "int get_val_plus_one(int* p) {\n    return *p / 2;\n}",
            "int get_val_plus_one(int* p) {\n    return 0;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise left shift. It accepts an integer and a number of positions to shift. It moves all bits of the integer to the left by the specified number of positions and returns the new integer.",
        "verbosity": "high",
        "function_name": "shift_bits_left",
        "c_implementation": "int shift_bits_left(int n, int shift) {\n    return n << shift;\n}",
        "c_corrupted_implementation": [
            "int shift_bits_left(int n, int shift) {\n    return n >> shift;\n}",
            "int shift_bits_left(int n, int shift) {\n    return n + shift;\n}",
            "int shift_bits_left(int n, int shift) {\n    return n - 1;\n}"
        ]
    },
    {
        "description": "This function takes two integers `x` and `y` and returns their sum.",
        "verbosity": "medium",
        "function_name": "compute_sum",
        "c_implementation": "int compute_sum(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int compute_sum(int x, int y) {\n    return x * y;\n}",
            "int compute_sum(int x, int y) {\n    return x - y;\n}",
            "int compute_sum(int x, int y) {\n    return x / y;\n}"
        ]
    },
    {
        "description": "Returns `x*y*z`.",
        "verbosity": "low",
        "function_name": "mult_three",
        "c_implementation": "int mult_three(int x, int y, int z) {\n    return x * y * z;\n}",
        "c_corrupted_implementation": [
            "int mult_three(int x, int y, int z) {\n    return x + y + z;\n}",
            "int mult_three(int x, int y, int z) {\n    return x - y / z;\n}",
            "int mult_three(int x, int y, int z) {\n    return x / y * z;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p`. It retrieves the value at that memory address, `v`, and returns the result of `v * v * v`, effectively cubing the value.",
        "verbosity": "high",
        "function_name": "cube_pointed_value",
        "c_implementation": "int cube_pointed_value(int* p) {\n    return (*p) * (*p) * (*p);\n}",
        "c_corrupted_implementation": [
            "int cube_pointed_value(int* p) {\n    return (*p) + (*p) + (*p);\n}",
            "int cube_pointed_value(int* p) {\n    return (*p) - (*p);\n}",
            "int cube_pointed_value(int* p) {\n    return (*p);\n}"
        ]
    },
    {
        "description": "The program takes two integer pointers, `p1` and `p2`, and returns the bitwise AND of the values they point to.",
        "verbosity": "medium",
        "function_name": "and_pointed_values",
        "c_implementation": "int and_pointed_values(int* p1, int* p2) {\n    return *p1 & *p2;\n}",
        "c_corrupted_implementation": [
            "int and_pointed_values(int* p1, int* p2) {\n    return *p1 | *p2;\n}",
            "int and_pointed_values(int* p1, int* p2) {\n    return *p2 / *p2;\n}",
            "int and_pointed_values(int* p1, int* p2) {\n    return *p1 ^ *p2;\n}"
        ]
    },
    {
        "description": "Returns a pointer to integer `x`.",
        "verbosity": "low",
        "function_name": "pointer_to_x",
        "c_implementation": "int* pointer_to_x(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* pointer_to_x(int* x) {\n    return NULL;\n}",
            "int* pointer_to_x(int* x) {\n    return x + 1;\n}",
            "int* pointer_to_x(int* x) {\n    return *x;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise right shift. It is given an integer and a shift amount. It shifts the bits of the integer to the right by the specified amount and returns the result.",
        "verbosity": "high",
        "function_name": "shift_bits_right",
        "c_implementation": "int shift_bits_right(int n, int shift) {\n    return n >> shift;\n}",
        "c_corrupted_implementation": [
            "int shift_bits_right(int n, int shift) {\n    return n << shift;\n}",
            "int shift_bits_right(int n, int shift) {\n    return n + shift - 2 * n;\n}",
            "int shift_bits_right(int n, int shift) {\n    return n - shift;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at that address.",
        "verbosity": "medium",
        "function_name": "get_pointer_val",
        "c_implementation": "int get_pointer_val(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_pointer_val(int* p) {\n    return (int)p;\n}",
            "int get_pointer_val(int* p) {\n    return p + 1;\n}",
            "int get_pointer_val(int* p) {\n    return p / 3;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p` and an integer `x`. It updates the value at memory location `p` to be `x`, and then returns the value of `x`.",
        "verbosity": "high",
        "function_name": "set_and_return_value",
        "c_implementation": "int set_and_return_value(int* p, int x) {\n    *p = x;\n    return x;\n}",
        "c_corrupted_implementation": [
            "int set_and_return_value(int* p, int x) {\n    *p = x;\n    return *p + 1;\n}",
            "int set_and_return_value(int* p, int x) {\n    *p = p;\n    return *x + 7;\n}",
            "int set_and_return_value(int* p, int x) {\n    *p = 1;\n    return *p + 2;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns `a % b`.",
        "verbosity": "low",
        "function_name": "mod_a_b",
        "c_implementation": "int mod_a_b(int a, int b) {\n    return a % b;\n}",
        "c_corrupted_implementation": [
            "int mod_a_b(int a, int b) {\n    return a / b;\n}",
            "int mod_a_b(int a, int b) {\n    return a + b;\n}",
            "int mod_a_b(int a, int b) {\n    return a ^ b;\n}"
        ]
    },
    {
        "description": "This program takes two integers `x` and `y` and returns their bitwise XOR.",
        "verbosity": "medium",
        "function_name": "xor_two_integers",
        "c_implementation": "int xor_two_integers(int x, int y) {\n    return x ^ y;\n}",
        "c_corrupted_implementation": [
            "int xor_two_integers(int x, int y) {\n    return x & y;\n}",
            "int xor_two_integers(int x, int y) {\n    return x / y;\n}",
            "int xor_two_integers(int x, int y) {\n    return x + y;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, sets `*p` to `*p + 1`.",
        "verbosity": "low",
        "function_name": "increment_at_p",
        "c_implementation": "void increment_at_p(int* p) {\n    *p = *p + 1;\n}",
        "c_corrupted_implementation": [
            "void increment_at_p(int* p) {\n    p = p + 1;\n}",
            "void increment_at_p(int* p) {\n    p += 1;\n}",
            "void increment_at_p(int* p) {\n    p = 2 / p;\n}"
        ]
    },
    {
        "description": "The program takes two integer pointers, `p1` and `p2`. It returns 1 if the value at `p1` is greater than the value at `p2`, and 0 otherwise.",
        "verbosity": "medium",
        "function_name": "is_p1_greater",
        "c_implementation": "int is_p1_greater(int* p1, int* p2) {\n    return *p1 > *p2;\n}",
        "c_corrupted_implementation": [
            "int is_p1_greater(int* p1, int* p2) {\n    return *p1 < *p2;\n}",
            "int is_p1_greater(int* p1, int* p2) {\n    return *p1 << *p2;\n}",
            "int is_p1_greater(int* p1, int* p2) {\n    return *p1 >> *p2;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise OR operation. It accepts two integers, compares their bits, and returns a new integer where a bit is 1 if it was 1 in either of the original numbers.",
        "verbosity": "high",
        "function_name": "compute_bitwise_or",
        "c_implementation": "int compute_bitwise_or(int a, int b) {\n    return a | b;\n}",
        "c_corrupted_implementation": [
            "int compute_bitwise_or(int a, int b) {\n    return a + b;\n}",
            "int compute_bitwise_or(int a, int b) {\n    return a - b;\n}",
            "int compute_bitwise_or(int a, int b) {\n    return a / b;\n}"
        ]
    },
    {
        "description": "This program takes an integer `x` and returns `x` multiplied by itself.",
        "verbosity": "medium",
        "function_name": "square_of_x",
        "c_implementation": "int square_of_x(int x) {\n    return x * x;\n}",
        "c_corrupted_implementation": [
            "int square_of_x(int x) {\n    return x + x;\n}",
            "int square_of_x(int x) {\n    return x - x;\n}",
            "int square_of_x(int x) {\n    return x / x;\n}"
        ]
    },
    {
        "description": "Returns `*p` given a pointer `p`.",
        "verbosity": "low",
        "function_name": "get_p_val",
        "c_implementation": "int get_p_val(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_p_val(int* p) {\n    return (int)p;\n}",
            "int get_p_val(int* p) {\n    return  0;\n}",
            "int get_p_val(int* p) {\n    return -1;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer `p` and an integer `x`. It multiplies the value at memory location `p` by `x` and updates the value at `p` with the result.",
        "verbosity": "high",
        "function_name": "multiply_value_at_pointer",
        "c_implementation": "void multiply_value_at_pointer(int* p, int x) {\n    *p = *p * x;\n}",
        "c_corrupted_implementation": [
            "void multiply_value_at_pointer(int* p, int x) {\n    *p = x;\n}",
            "void multiply_value_at_pointer(int* p, int x) {\n    *p = x + 1;\n}",
            "void multiply_value_at_pointer(int* p, int x) {\n    *p = p + x;\n}"
        ]
    },
    {
        "description": "Given two integer pointers `p1` and `p2`, returns `*p1 * *p2`.",
        "verbosity": "low",
        "function_name": "mult_pointed_vals",
        "c_implementation": "int mult_pointed_vals(int* p1, int* p2) {\n    return *p1 * *p2;\n}",
        "c_corrupted_implementation": [
            "int mult_pointed_vals(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int mult_pointed_vals(int* p1, int* p2) {\n    return *p1 / *p2;\n}",
            "int mult_pointed_vals(int* p1, int* p2) {\n    return *p1 ^ *p2;\n}"
        ]
    },
    {
        "description": "This function takes two integers `a` and `b` and returns `a+a+b`.",
        "verbosity": "medium",
        "function_name": "double_a_plus_b",
        "c_implementation": "int double_a_plus_b(int a, int b) {\n    return a + a + b;\n}",
        "c_corrupted_implementation": [
            "int double_a_plus_b(int a, int b) {\n    return a + b + b;\n}",
            "int double_a_plus_b(int a, int b) {\n    return a + b * b;\n}",
            "int double_a_plus_b(int a, int b) {\n    return a / b + b;\n}"
        ]
    },
    {
        "description": "Returns `x*2`.",
        "verbosity": "low",
        "function_name": "mult_by_2",
        "c_implementation": "int mult_by_2(int x) {\n    return x * 2;\n}",
        "c_corrupted_implementation": [
            "int mult_by_2(int x) {\n    return x + 2;\n}",
            "int mult_by_2(int x) {\n    return x * x;\n}",
            "int mult_by_2(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "The function's purpose is to find the product of two numbers. It takes two integer arguments, multiplies them together, and returns the resulting integer value.",
        "verbosity": "high",
        "function_name": "calculate_product_verbose",
        "c_implementation": "int calculate_product_verbose(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int calculate_product_verbose(int a, int b) {\n    return a / b;\n}",
            "int calculate_product_verbose(int a, int b) {\n    return a + b;\n}",
            "int calculate_product_verbose(int a, int b) {\n    return a - b;\n}"
        ]
    },
    {
        "description": "The program takes a pointer to an integer `p` and returns 1 if the value it points to is negative, and 0 otherwise.",
        "verbosity": "medium",
        "function_name": "is_pointed_value_negative",
        "c_implementation": "int is_pointed_value_negative(int* p) {\n    return *p < 0;\n}",
        "c_corrupted_implementation": [
            "int is_pointed_value_negative(int* p) {\n    return *p > 0;\n}",
            "int is_pointed_value_negative(int* p) {\n    return *p >> 2;\n}",
            "int is_pointed_value_negative(int* p) {\n    return *p + 1;\n}"
        ]
    },
    {
        "description": "Returns the integer constant 100.",
        "verbosity": "low",
        "function_name": "get_one_hundred",
        "c_implementation": "int get_one_hundred() {\n    return 100;\n}",
        "c_corrupted_implementation": [
            "int get_one_hundred() {\n    return -100;\n}",
            "int get_one_hundred() {\n    return 1;\n}",
            "int get_one_hundred() {\n    return 10;\n}"
        ]
    },
    {
        "description": "This program is designed to take a single integer input, which we'll call 'number'. It then performs an identity operation, returning the exact same 'number' without any changes. This serves as a basic pass-through function.",
        "verbosity": "high",
        "function_name": "passthrough_integer",
        "c_implementation": "int passthrough_integer(int number) {\n    return number;\n}",
        "c_corrupted_implementation": [
            "int passthrough_integer(int number) {\n    return number + 1;\n}",
            "int passthrough_integer(int number) {\n    return number / 2;\n}",
            "int passthrough_integer(int number) {\n    return number / 5;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, this function computes and returns `x` plus one.",
        "verbosity": "medium",
        "function_name": "compute_plus_one",
        "c_implementation": "int compute_plus_one(int x) {\n    return x + 1;\n}",
        "c_corrupted_implementation": [
            "int compute_plus_one(int x) {\n    return x - 1;\n}",
            "int compute_plus_one(int x) {\n    return x / 5;\n}",
            "int compute_plus_one(int x) {\n    return x ^ 3;\n}"
        ]
    },
    {
        "description": "Calculates `x` minus 1.",
        "verbosity": "low",
        "function_name": "calculate_minus_one",
        "c_implementation": "int calculate_minus_one(int x) {\n    return x - 1;\n}",
        "c_corrupted_implementation": [
            "int calculate_minus_one(int x) {\n    return 1 - x;\n}",
            "int calculate_minus_one(int x) {\n    return x;\n}",
            "int calculate_minus_one(int x) {\n    return x + 1;\n}"
        ]
    },
    {
        "description": "The function's primary role is to take a pointer to an integer, `p_val`. It then dereferences this pointer to access the integer value and returns this value, effectively reading from the memory address provided by the pointer.",
        "verbosity": "high",
        "function_name": "read_from_address",
        "c_implementation": "int read_from_address(int* p_val) {\n    return *p_val;\n}",
        "c_corrupted_implementation": [
            "int read_from_address(int* p_val) {\n    return (int)p_val;\n}",
            "int read_from_address(int* p_val) {\n    return p_val;\n}",
            "int read_from_address(int* p_val) {\n    return 0;\n}"
        ]
    },
    {
        "description": "This program will perform a bitwise XOR operation on two integer inputs, `a` and `b`, and return the resulting integer.",
        "verbosity": "medium",
        "function_name": "perform_bitwise_xor",
        "c_implementation": "int perform_bitwise_xor(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int perform_bitwise_xor(int a, int b) {\n    return a & b;\n}",
            "int perform_bitwise_xor(int a, int b) {\n    return a / b;\n}",
            "int perform_bitwise_xor(int a, int b) {\n    return a >> b;\n}"
        ]
    },
    {
        "description": "Computes the bitwise NOT of an integer `x`.",
        "verbosity": "low",
        "function_name": "compute_bitwise_not",
        "c_implementation": "int compute_bitwise_not(int x) {\n    return ~x;\n}",
        "c_corrupted_implementation": [
            "int compute_bitwise_not(int x) {\n    return x;\n}",
            "int compute_bitwise_not(int x) {\n    return -x;\n}",
            "int compute_bitwise_not(int x) {\n    return x ^ 0;\n}"
        ]
    },
    {
        "description": "This function is responsible for taking an integer `n` and shifting its bits to the left by a fixed amount of 2 positions. This operation is equivalent to multiplying the integer by 4. The final, shifted integer is then returned.",
        "verbosity": "high",
        "function_name": "shift_left_two_and_return",
        "c_implementation": "int shift_left_two_and_return(int n) {\n    return n << 2;\n}",
        "c_corrupted_implementation": [
            "int shift_left_two_and_return(int n) {\n    return n >> 2;\n}",
            "int shift_left_two_and_return(int n) {\n    return n / 3;\n}",
            "int shift_left_two_and_return(int n) {\n    return n * 4;\n}"
        ]
    },
    {
        "description": "Performs a bitwise right shift on an integer `a` by 1 position.",
        "verbosity": "low",
        "function_name": "right_shift_by_one",
        "c_implementation": "int right_shift_by_one(int a) {\n    return a >> 1;\n}",
        "c_corrupted_implementation": [
            "int right_shift_by_one(int a) {\n    return a << 1;\n}",
            "int right_shift_by_one(int a) {\n    return a + 1;\n}",
            "int right_shift_by_one(int a) {\n    return a;\n}"
        ]
    },
    {
        "description": "The function takes an integer `n` and returns its value multiplied by 8, using a bitwise left shift.",
        "verbosity": "medium",
        "function_name": "multiply_by_8_shift",
        "c_implementation": "int multiply_by_8_shift(int n) {\n    return n << 3;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_8_shift(int n) {\n    return n * 3;\n}",
            "int multiply_by_8_shift(int n) {\n    return n + 6;\n}",
            "int multiply_by_8_shift(int n) {\n    return n / 5;\n}"
        ]
    },
    {
        "description": "This program's purpose is to take an integer `x` and set the value of the integer pointed to by pointer `p` to `x`.",
        "verbosity": "medium",
        "function_name": "set_pointer_to_int",
        "c_implementation": "void set_pointer_to_int(int* p, int x) {\n    *p = x;\n}",
        "c_corrupted_implementation": [
            "void set_pointer_to_int(int* p, int x) {\n    p = &x;\n}",
            "void set_pointer_to_int(int* p, int x) {\n    p = x + 1;\n}",
            "void set_pointer_to_int(int* p, int x) {\n    *p = x + 2;\n}"
        ]
    },
    {
        "description": "Given an integer pointer `p`, this function returns the value it points to.",
        "verbosity": "low",
        "function_name": "get_val",
        "c_implementation": "int get_val(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_val(int* p) {\n    return 0;\n}",
            "int get_val(int* p) {\n    return p + 1;\n}",
            "int get_val(int* p) {\n    return p;\n}"
        ]
    },
    {
        "description": "This function takes two integer pointers, `ptr_a` and `ptr_b`, and calculates the product of the values they point to.",
        "verbosity": "medium",
        "function_name": "get_pointed_product",
        "c_implementation": "int get_pointed_product(int* ptr_a, int* ptr_b) {\n    return (*ptr_a) * (*ptr_b);\n}",
        "c_corrupted_implementation": [
            "int get_pointed_product(int* ptr_a, int* ptr_b) {\n    return *ptr_a / *ptr_b;\n}",
            "int get_pointed_product(int* ptr_a, int* ptr_b) {\n    return *ptr_a & (*ptr_b + 1);\n}",
            "int get_pointed_product(int* ptr_a, int* ptr_b) {\n    return *ptr_a + *ptr_a;\n}"
        ]
    },
    {
        "description": "The program is designed to take a pointer to an integer, `p_num`. It also takes an integer value, `val`. The core logic involves adding `val` to the integer that `p_num` points to, and then updating the value at that memory location with the new sum.",
        "verbosity": "high",
        "function_name": "add_val_to_pointer_loc",
        "c_implementation": "void add_val_to_pointer_loc(int* p_num, int val) {\n    *p_num = *p_num + val;\n}",
        "c_corrupted_implementation": [
            "void add_val_to_pointer_loc(int* p_num, int val) {\n    *p_num = val;\n}",
            "void add_val_to_pointer_loc(int* p_num, int val) {\n    *p_num = 1;\n}",
            "void add_val_to_pointer_loc(int* p_num, int val) {\n    *p_num = p_num;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer `p`, this function subtracts 10 from the value at the address `p` points to.",
        "verbosity": "low",
        "function_name": "subtract_10_from_pointed",
        "c_implementation": "void subtract_10_from_pointed(int* p) {\n    *p = *p - 10;\n}",
        "c_corrupted_implementation": [
            "void subtract_10_from_pointed(int* p) {\n    *p = 10;\n}",
            "void subtract_10_from_pointed(int* p) {\n    *p = 1;\n}",
            "void subtract_10_from_pointed(int* p) {\n    *p = p;\n}"
        ]
    },
    {
        "description": "This program takes three integer inputs: `x`, `y`, and `z`. It calculates the expression `x * y - z`.",
        "verbosity": "medium",
        "function_name": "multiply_and_subtract",
        "c_implementation": "int multiply_and_subtract(int x, int y, int z) {\n    return x * y - z;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_subtract(int x, int y, int z) {\n    return x * (y - z);\n}",
            "int multiply_and_subtract(int x, int y, int z) {\n    return x + (y + z);\n}",
            "int multiply_and_subtract(int x, int y, int z) {\n    return x * (y * z);\n}"
        ]
    },
    {
        "description": "The function is designed to compute the result of `(a-b)/c`. It takes three integers 'a', 'b', and 'c' as input, calculates the difference between 'a' and 'b', and then performs an integer division of that result by 'c'. The final integer quotient is returned.",
        "verbosity": "high",
        "function_name": "subtract_and_divide",
        "c_implementation": "int subtract_and_divide(int a, int b, int c) {\n    return (a - b) / c;\n}",
        "c_corrupted_implementation": [
            "int subtract_and_divide(int a, int b, int c) {\n    return (a / c) - b;\n}",
            "int subtract_and_divide(int a, int b, int c) {\n    return (a + c) * b;\n}",
            "int subtract_and_divide(int a, int b, int c) {\n    return (a / b) - c;\n}"
        ]
    },
    {
        "description": "Swaps the values pointed to by two integer pointers, `p1` and `p2`.",
        "verbosity": "low",
        "function_name": "swap_pointed_integers",
        "c_implementation": "void swap_pointed_integers(int* p1, int* p2) {\n    int temp = *p1;\n    *p1 = *p2;\n    *p2 = temp;\n}",
        "c_corrupted_implementation": [
            "void swap_pointed_integers(int* p1, int* p2) {\n    int temp = *p1;\n    *p1 = *p2;\n    *p2 = *p1;\n}",
            "void swap_pointed_integers(int* p1, int* p2) {\n    int temp = *p2;\n    *p1 = *p1;\n    *p2 = *p2;\n}",
            "void swap_pointed_integers(int* p1, int* p2) {\n    int temp = *p1 + 1;\n    *p1 = *p2;\n    *p2 = *p2;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer, `p_val`, and an integer `divisor`. It's designed to update the value pointed to by `p_val` with the result of its original value modulo the `divisor`.",
        "verbosity": "medium",
        "function_name": "update_to_modulo",
        "c_implementation": "void update_to_modulo(int* p_val, int divisor) {\n    *p_val = *p_val % divisor;\n}",
        "c_corrupted_implementation": [
            "void update_to_modulo(int* p_val, int divisor) {\n    *p_val = *p_val / divisor;\n}",
            "void update_to_modulo(int* p_val, int divisor) {\n    *p_val = *p_val + divisor;\n}",
            "void update_to_modulo(int* p_val, int divisor) {\n    *p_val = *p_val * divisor;\n}"
        ]
    },
    {
        "description": "Calculates the cube of an integer, `a`, returning the result of `a*a*a`.",
        "verbosity": "low",
        "function_name": "get_cube",
        "c_implementation": "int get_cube(int a) {\n    return a * a * a;\n}",
        "c_corrupted_implementation": [
            "int get_cube(int a) {\n    return a + a + a;\n}",
            "int get_cube(int a) {\n    return a + a - a;\n}",
            "int get_cube(int a) {\n    return a / a + a;\n}"
        ]
    },
    {
        "description": "The program is designed to take a pointer to an integer 'ptr'. Its function is to modify the value stored at the memory location 'ptr' points to. It does this by performing a bitwise left shift of the current value by 1, effectively doubling it, and then updates the value at that memory location with the result.",
        "verbosity": "high",
        "function_name": "double_value_at_pointer_by_shift",
        "c_implementation": "void double_value_at_pointer_by_shift(int* ptr) {\n    *ptr = *ptr << 1;\n}",
        "c_corrupted_implementation": [
            "void double_value_at_pointer_by_shift(int* ptr) {\n    *ptr = *ptr >> 1;\n}",
            "void double_value_at_pointer_by_shift(int* ptr) {\n    *ptr = *ptr - 2;\n}",
            "void double_value_at_pointer_by_shift(int* ptr) {\n    *ptr = *ptr + 3;\n}"
        ]
    },
    {
        "description": "Takes two integers and returns their difference.",
        "verbosity": "low",
        "function_name": "get_difference_of_two",
        "c_implementation": "int get_difference_of_two(int a, int b) {\n    return a - b;\n}",
        "c_corrupted_implementation": [
            "int get_difference_of_two(int a, int b) {\n    return b - a;\n}",
            "int get_difference_of_two(int a, int b) {\n    return a * b;\n}",
            "int get_difference_of_two(int a, int b) {\n    return a + b;\n}"
        ]
    },
    {
        "description": "This program takes two integer values, a 'base' and an 'exponent', but only uses the base. It calculates the square of the 'base' value and returns this result. The 'exponent' input is ignored.",
        "verbosity": "high",
        "function_name": "square_base_ignore_exponent",
        "c_implementation": "int square_base_ignore_exponent(int base, int exponent) {\n    return base * base;\n}",
        "c_corrupted_implementation": [
            "int square_base_ignore_exponent(int base, int exponent) {\n    return base * exponent;\n}",
            "int square_base_ignore_exponent(int base, int exponent) {\n    return base / exponent;\n}",
            "int square_base_ignore_exponent(int base, int exponent) {\n    return base + exponent;\n}"
        ]
    },
    {
        "description": "Computes the bitwise AND of an integer `x` with the constant 255.",
        "verbosity": "medium",
        "function_name": "and_with_255",
        "c_implementation": "int and_with_255(int x) {\n    return x & 255;\n}",
        "c_corrupted_implementation": [
            "int and_with_255(int x) {\n    return x | 255;\n}",
            "int and_with_255(int x) {\n    return x - 2;\n}",
            "int and_with_255(int x) {\n    return x + 5;\n}"
        ]
    },
    {
        "description": "The function takes a pointer to an integer `ptr` and an integer `mask`. It performs a bitwise OR on the value at `ptr` with the `mask`.",
        "verbosity": "medium",
        "function_name": "apply_or_mask",
        "c_implementation": "void apply_or_mask(int* ptr, int mask) {\n    *ptr = *ptr | mask;\n}",
        "c_corrupted_implementation": [
            "void apply_or_mask(int* ptr, int mask) {\n    *ptr = *ptr & mask;\n}",
            "void apply_or_mask(int* ptr, int mask) {\n    *ptr = -mask;\n}",
            "void apply_or_mask(int* ptr, int mask) {\n    *ptr = *ptr * mask;\n}"
        ]
    },
    {
        "description": "This program's job is to take two integer pointers, `ptr1` and `ptr2`, and copy the value from the location of `ptr1` to the location of `ptr2`. It achieves this by dereferencing `ptr1` to get its value and then dereferencing `ptr2` to assign that value to its memory location.",
        "verbosity": "high",
        "function_name": "copy_value_via_pointers",
        "c_implementation": "void copy_value_via_pointers(int* ptr1, int* ptr2) {\n    *ptr2 = *ptr1;\n}",
        "c_corrupted_implementation": [
            "void copy_value_via_pointers(int* ptr1, int* ptr2) {\n    *ptr1 = *ptr2;\n}",
            "void copy_value_via_pointers(int* ptr1, int* ptr2) {\n    *ptr1 = *ptr2 + 1;\n}",
            "void copy_value_via_pointers(int* ptr1, int* ptr2) {\n    *ptr1 += *ptr2;\n}"
        ]
    },
    {
        "description": "Returns the value of an integer `x`.",
        "verbosity": "low",
        "function_name": "get_x_val",
        "c_implementation": "int get_x_val(int x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int get_x_val(int x) {\n    return -x;\n}",
            "int get_x_val(int x) {\n    return x + 1;\n}",
            "int get_x_val(int x) {\n    return x * 2;\n}"
        ]
    },
    {
        "description": "The primary function of this program is to perform a multiplication. It accepts two integers, let's call them `factor1` and `factor2`, as its parameters. The program will then calculate the result of `factor1 * factor2` and output this final integer value.",
        "verbosity": "high",
        "function_name": "perform_multiplication",
        "c_implementation": "int perform_multiplication(int factor1, int factor2) {\n    return factor1 * factor2;\n}",
        "c_corrupted_implementation": [
            "int perform_multiplication(int factor1, int factor2) {\n    return factor1 + factor2;\n}",
            "int perform_multiplication(int factor1, int factor2) {\n    return factor1 / factor2;\n}",
            "int perform_multiplication(int factor1, int factor2) {\n    return factor1 & factor2;\n}"
        ]
    },
    {
        "description": "Calculates the bitwise XOR of two input integers.",
        "verbosity": "medium",
        "function_name": "get_bitwise_xor",
        "c_implementation": "int get_bitwise_xor(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int get_bitwise_xor(int a, int b) {\n    return a | b;\n}",
            "int get_bitwise_xor(int a, int b) {\n    return a / b;\n}",
            "int get_bitwise_xor(int a, int b) {\n    return a & (b + 1);\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, the program returns the result of `x + (x * y)`.",
        "verbosity": "low",
        "function_name": "add_and_product",
        "c_implementation": "int add_and_product(int x, int y) {\n    return x + (x * y);\n}",
        "c_corrupted_implementation": [
            "int add_and_product(int x, int y) {\n    return (x + x) * y;\n}",
            "int add_and_product(int x, int y) {\n    return x * y;\n}",
            "int add_and_product(int x, int y) {\n    return (x * x) + y;\n}"
        ]
    },
    {
        "description": "The function takes two pointers to integers, `p_a` and `p_b`. It retrieves the values at their respective memory locations and returns their sum.",
        "verbosity": "medium",
        "function_name": "sum_from_pointers",
        "c_implementation": "int sum_from_pointers(int* p_a, int* p_b) {\n    return *p_a + *p_b;\n}",
        "c_corrupted_implementation": [
            "int sum_from_pointers(int* p_a, int* p_b) {\n    return *p_a - *p_b;\n}",
            "int sum_from_pointers(int* p_a, int* p_b) {\n    return *p_a * *p_b;\n}",
            "int sum_from_pointers(int* p_a, int* p_b) {\n    return *p_a + 1 / *p_b;\n}"
        ]
    },
    {
        "description": "Given pointers `p1` and `p2`, copies the value from `*p1` to `*p2`.",
        "verbosity": "low",
        "function_name": "copy_p1_to_p2",
        "c_implementation": "void copy_p1_to_p2(int* p1, int* p2) {\n    *p2 = *p1;\n}",
        "c_corrupted_implementation": [
            "void copy_p1_to_p2(int* p1, int* p2) {\n    *p1 = *p2;\n}",
            "void copy_p1_to_p2(int* p1, int* p2) {\n    *p1 = *p2 + 2;\n}",
            "void copy_p1_to_p2(int* p1, int* p2) {\n    *p1 = 3;\n}"
        ]
    },
    {
        "description": "The function is built to compute the area of a rectangle. It accepts two integers as arguments: `width` and `height`. The function will multiply `width` by `height`. The final result of this calculation is returned as the area.",
        "verbosity": "high",
        "function_name": "calculate_rectangle_area",
        "c_implementation": "int calculate_rectangle_area(int width, int height) {\n    return width * height;\n}",
        "c_corrupted_implementation": [
            "int calculate_rectangle_area(int width, int height) {\n    return width + height;\n}",
            "int calculate_rectangle_area(int width, int height) {\n    return (width + height) / 2;\n}",
            "int calculate_rectangle_area(int width, int height) {\n    return width + height * 3.1452;\n}"
        ]
    },
    {
        "description": "This program takes four integers, `a`, `b`, `c`, and `d`, and returns their sum.",
        "verbosity": "medium",
        "function_name": "sum_four_integers",
        "c_implementation": "int sum_four_integers(int a, int b, int c, int d) {\n    return a + b + c + d;\n}",
        "c_corrupted_implementation": [
            "int sum_four_integers(int a, int b, int c, int d) {\n    return a - b - c - d;\n}",
            "int sum_four_integers(int a, int b, int c, int d) {\n    return a + b - c + d;\n}",
            "int sum_four_integers(int a, int b, int c, int d) {\n    return a * b - c / d;\n}"
        ]
    },
    {
        "description": "This program returns a pointer to an integer `x`.",
        "verbosity": "low",
        "function_name": "return_pointer_to_x",
        "c_implementation": "int* return_pointer_to_x(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* return_pointer_to_x(int* x) {\n    return NULL;\n}",
            "int* return_pointer_to_x(int* x) {\n    return 0;\n}",
            "int* return_pointer_to_x(int* x) {\n    return *x;\n}"
        ]
    },
    {
        "description": "This function's purpose is to find the difference of two integers. It accepts these two integers, let's name them `minuend` and `subtrahend`, and subtracts the latter from the former. The final result of this subtraction is then returned.",
        "verbosity": "high",
        "function_name": "find_difference",
        "c_implementation": "int find_difference(int minuend, int subtrahend) {\n    return minuend - subtrahend;\n}",
        "c_corrupted_implementation": [
            "int find_difference(int minuend, int subtrahend) {\n    return subtrahend - minuend;\n}",
            "int find_difference(int minuend, int subtrahend) {\n    return subtrahend + minuend;\n}",
            "int find_difference(int minuend, int subtrahend) {\n    return -subtrahend * minuend;\n}"
        ]
    },
    {
        "description": "Given two integers `a` and `b`, this function returns `(a + b) * b`.",
        "verbosity": "medium",
        "function_name": "sum_and_multiply_by_b",
        "c_implementation": "int sum_and_multiply_by_b(int a, int b) {\n    return (a + b) * b;\n}",
        "c_corrupted_implementation": [
            "int sum_and_multiply_by_b(int a, int b) {\n    return a + (b * b);\n}",
            "int sum_and_multiply_by_b(int a, int b) {\n    return a + (b - b);\n}",
            "int sum_and_multiply_by_b(int a, int b) {\n    return a + b * 2;\n}"
        ]
    },
    {
        "description": "Given two integers, x and y, this program returns their sum.",
        "verbosity": "low",
        "function_name": "sum_x_y",
        "c_implementation": "int sum_x_y(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int sum_x_y(int x, int y) {\n    return x * y;\n}",
            "int sum_x_y(int x, int y) {\n    return (x - 1) / y;\n}",
            "int sum_x_y(int x, int y) {\n    return x ^ y;\n}"
        ]
    },
    {
        "description": "The program takes two integer inputs, `val1` and `val2`. It performs a bitwise AND operation between them and returns the resulting integer.",
        "verbosity": "medium",
        "function_name": "perform_and_operation",
        "c_implementation": "int perform_and_operation(int val1, int val2) {\n    return val1 & val2;\n}",
        "c_corrupted_implementation": [
            "int perform_and_operation(int val1, int val2) {\n    return val1 | val2;\n}",
            "int perform_and_operation(int val1, int val2) {\n    return val1 / val2;\n}",
            "int perform_and_operation(int val1, int val2) {\n    return val1 - val2;\n}"
        ]
    },
    {
        "description": "This function performs a series of arithmetic operations. It takes three integer inputs: `a`, `b`, and `c`. The function first adds `a` and `b`, then divides the sum by `c` using integer division.",
        "verbosity": "medium",
        "function_name": "add_and_divide",
        "c_implementation": "int add_and_divide(int a, int b, int c) {\n    return (a + b) / c;\n}",
        "c_corrupted_implementation": [
            "int add_and_divide(int a, int b, int c) {\n    return a + (b / c);\n}",
            "int add_and_divide(int a, int b, int c) {\n    return a + (b * c);\n}",
            "int add_and_divide(int a, int b, int c) {\n    return a / (b - c);\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, this function decrements the integer it points to by one.",
        "verbosity": "low",
        "function_name": "decrement_p_val",
        "c_implementation": "void decrement_p_val(int* p) {\n    *p = *p - 1;\n}",
        "c_corrupted_implementation": [
            "void decrement_p_val(int* p) {\n    p = p - 1;\n}",
            "void decrement_p_val(int* p) {\n    p = 2;\n}",
            "void decrement_p_val(int* p) {\n    p = *p + 1;\n}"
        ]
    },
    {
        "description": "This program's single responsibility is to provide the memory address of an integer variable. It is given a single integer as an argument. The program then returns a pointer that holds the memory address where the integer is stored in the system's memory.",
        "verbosity": "high",
        "function_name": "get_address_of_int",
        "c_implementation": "int* get_address_of_int(int* n) {\n    return n;\n}",
        "c_corrupted_implementation": [
            "int* get_address_of_int(int* n) {\n    return NULL;\n}",
            "int* get_address_of_int(int* n) {\n    return -n;\n}",
            "int* get_address_of_int(int* n) {\n    return 1 + n;\n}"
        ]
    },
    {
        "description": "Calculates the bitwise XOR of an integer x with itself.",
        "verbosity": "low",
        "function_name": "xor_self",
        "c_implementation": "int xor_self(int x) {\n    return x ^ x;\n}",
        "c_corrupted_implementation": [
            "int xor_self(int x) {\n    return x | x;\n}",
            "int xor_self(int x) {\n    return x & x;\n}",
            "int xor_self(int x) {\n    return x + 1;\n}"
        ]
    },
    {
        "description": "The function's objective is to perform a simple addition. It takes two integer parameters, adds them together, and returns the resulting sum.",
        "verbosity": "medium",
        "function_name": "simple_addition",
        "c_implementation": "int simple_addition(int a, int b) {\n    return a + b;\n}",
        "c_corrupted_implementation": [
            "int simple_addition(int a, int b) {\n    return a * b;\n}",
            "int simple_addition(int a, int b) {\n    return a - b;\n}",
            "int simple_addition(int a, int b) {\n    return a * a + b;\n}"
        ]
    },
    {
        "description": "This function is designed to take two integer pointers, `p1` and `p2`. It dereferences both pointers to get their respective integer values, and then returns the sum of these two values.",
        "verbosity": "high",
        "function_name": "sum_values_from_pointers",
        "c_implementation": "int sum_values_from_pointers(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
        "c_corrupted_implementation": [
            "int sum_values_from_pointers(int* p1, int* p2) {\n    return *p1 * *p2;\n}",
            "int sum_values_from_pointers(int* p1, int* p2) {\n    return *p1 / *p2;\n}",
            "int sum_values_from_pointers(int* p1, int* p2) {\n    return *p1 - *p2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, the program halves the value at that address.",
        "verbosity": "low",
        "function_name": "halve_at_pointer",
        "c_implementation": "void halve_at_pointer(int* p) {\n    *p = *p / 2;\n}",
        "c_corrupted_implementation": [
            "void halve_at_pointer(int* p) {\n    *p = *p - 2;\n}",
            "void halve_at_pointer(int* p) {\n    *p = 2;\n}",
            "void halve_at_pointer(int* p) {\n    *p = *p + 3;\n}"
        ]
    },
    {
        "description": "Computes `(a + b) * (a + b)` for two integers a and b.",
        "verbosity": "low",
        "function_name": "square_of_sum",
        "c_implementation": "int square_of_sum(int a, int b) {\n    return (a + b) * (a + b);\n}",
        "c_corrupted_implementation": [
            "int square_of_sum(int a, int b) {\n    return (a * a) + (b * b);\n}",
            "int square_of_sum(int a, int b) {\n    return (a * b) - (a * b);\n}",
            "int square_of_sum(int a, int b) {\n    return (a * a) + (a * a);\n}"
        ]
    },
    {
        "description": "This function is designed to perform a specific three-step arithmetic calculation. It takes three integer inputs, 'val1', 'val2', and 'val3'. The procedure is as follows: first, it subtracts 'val2' from 'val1'. Second, it adds 'val3' to that difference. Finally, it returns the resulting integer value.",
        "verbosity": "high",
        "function_name": "subtract_then_add",
        "c_implementation": "int subtract_then_add(int val1, int val2, int val3) {\n    return (val1 - val2) + val3;\n}",
        "c_corrupted_implementation": [
            "int subtract_then_add(int val1, int val2, int val3) {\n    return val1 - (val2 + val3);\n}",
            "int subtract_then_add(int val1, int val2, int val3) {\n    return val1 + val2 + val3;\n}",
            "int subtract_then_add(int val1, int val2, int val3) {\n    return val1 * val2 * val3;\n}"
        ]
    },
    {
        "description": "Takes an integer and returns it.",
        "verbosity": "low",
        "function_name": "return_int",
        "c_implementation": "int return_int(int x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int return_int(int x) {\n    return x + 1;\n}",
            "int return_int(int x) {\n    return x - 2;\n}",
            "int return_int(int x) {\n    return x / 3;\n}"
        ]
    },
    {
        "description": "The program takes an integer `x` and returns `x` divided by 2 using a bitwise right shift by 1 position.",
        "verbosity": "medium",
        "function_name": "divide_by_two_bitwise",
        "c_implementation": "int divide_by_two_bitwise(int x) {\n    return x >> 1;\n}",
        "c_corrupted_implementation": [
            "int divide_by_two_bitwise(int x) {\n    return x << 1;\n}",
            "int divide_by_two_bitwise(int x) {\n    return x - 2;\n}",
            "int divide_by_two_bitwise(int x) {\n    return x - 4;\n}"
        ]
    },
    {
        "description": "Given two integer pointers `p1` and `p2`, returns the product of the values they point to.",
        "verbosity": "low",
        "function_name": "product_of_pointed",
        "c_implementation": "int product_of_pointed(int* p1, int* p2) {\n    return *p1 * *p2;\n}",
        "c_corrupted_implementation": [
            "int product_of_pointed(int* p1, int* p2) {\n    return *p1 + *p2;\n}",
            "int product_of_pointed(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
            "int product_of_pointed(int* p1, int* p2) {\n    return *p1 - 1 / *p2;\n}"
        ]
    },
    {
        "description": "This program takes two integer pointers, `ptr1` and `ptr2`. It calculates the bitwise AND of the integer values stored at the memory locations they point to.",
        "verbosity": "medium",
        "function_name": "and_of_pointed_values",
        "c_implementation": "int and_of_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 & *ptr2;\n}",
        "c_corrupted_implementation": [
            "int and_of_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1 ^ *ptr2;\n}",
            "int and_of_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr2;\n}",
            "int and_of_pointed_values(int* ptr1, int* ptr2) {\n    return *ptr1;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns a pointer to it.",
        "verbosity": "low",
        "function_name": "get_pointer_to_int",
        "c_implementation": "int* get_pointer_to_int(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* get_pointer_to_int(int* x) {\n    return x + 1;\n}",
            "int* get_pointer_to_int(int* x) {\n    return x - 1;\n}",
            "int* get_pointer_to_int(int* x) {\n    return x / 2;\n}"
        ]
    },
    {
        "description": "The function's purpose is to take an integer and return it unchanged. It receives a single integer as its input, and without performing any operations on it, it returns the very same integer as its output. This is often used for testing or as a placeholder.",
        "verbosity": "high",
        "function_name": "identity_function_verbose",
        "c_implementation": "int identity_function_verbose(int n) {\n    return n;\n}",
        "c_corrupted_implementation": [
            "int identity_function_verbose(int n) {\n    return n * 2;\n}",
            "int identity_function_verbose(int n) {\n    return n * n;\n}",
            "int identity_function_verbose(int n) {\n    return n / 3;\n}"
        ]
    },
    {
        "description": "Computes `(a * b) % c` for three integers a, b, and c.",
        "verbosity": "low",
        "function_name": "multiply_and_modulo",
        "c_implementation": "int multiply_and_modulo(int a, int b, int c) {\n    return (a * b) % c;\n}",
        "c_corrupted_implementation": [
            "int multiply_and_modulo(int a, int b, int c) {\n    return a * (b % c);\n}",
            "int multiply_and_modulo(int a, int b, int c) {\n    return a + (b - c);\n}",
            "int multiply_and_modulo(int a, int b, int c) {\n    return a - (b % c);\n}"
        ]
    },
    {
        "description": "This program takes an integer and performs a bitwise right shift by 2 positions, which is equivalent to dividing by 4.",
        "verbosity": "medium",
        "function_name": "right_shift_by_two",
        "c_implementation": "int right_shift_by_two(int n) {\n    return n >> 2;\n}",
        "c_corrupted_implementation": [
            "int right_shift_by_two(int n) {\n    return n / 2;\n}",
            "int right_shift_by_two(int n) {\n    return n << 4;\n}",
            "int right_shift_by_two(int n) {\n    return n + 1;\n}"
        ]
    },
    {
        "description": "Takes two integers `a` and `b` and returns `a - b - b`.",
        "verbosity": "low",
        "function_name": "subtract_double_b",
        "c_implementation": "int subtract_double_b(int a, int b) {\n    return a - b - b;\n}",
        "c_corrupted_implementation": [
            "int subtract_double_b(int a, int b) {\n    return a - (b + b);\n}",
            "int subtract_double_b(int a, int b) {\n    return a - b;\n}",
            "int subtract_double_b(int a, int b) {\n    return a + b;\n}"
        ]
    },
    {
        "description": "Given an integer pointer `p`, the function updates the value it points to by performing a bitwise XOR with the integer `mask`.",
        "verbosity": "medium",
        "function_name": "apply_xor_mask_to_pointer",
        "c_implementation": "void apply_xor_mask_to_pointer(int* p, int mask) {\n    *p = *p ^ mask;\n}",
        "c_corrupted_implementation": [
            "void apply_xor_mask_to_pointer(int* p, int mask) {\n    *p = *p & mask;\n}",
            "void apply_xor_mask_to_pointer(int* p, int mask) {\n    *p = -mask;\n}",
            "void apply_xor_mask_to_pointer(int* p, int mask) {\n    *p = *p + mask;\n}"
        ]
    },
    {
        "description": "Returns 1 if an integer is odd, 0 if even, using bitwise operations.",
        "verbosity": "medium",
        "function_name": "is_odd",
        "c_implementation": "int is_odd(int n) {\n    return n & 1;\n}",
        "c_corrupted_implementation": [
            "int is_odd(int n) {\n    return (n % 2) == 0;\n}",
            "int is_odd(int n) {\n    return n / 2;\n}",
            "int is_odd(int n) {\n    return n + n\n}"
        ]
    },
    {
        "description": "Calculates `x * 4` using a bitwise left shift.",
        "verbosity": "low",
        "function_name": "multiply_by_four_shift",
        "c_implementation": "int multiply_by_four_shift(int x) {\n    return x << 2;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_four_shift(int x) {\n    return x >> 2;\n}",
            "int multiply_by_four_shift(int x) {\n    return x + 2;\n}",
            "int multiply_by_four_shift(int x) {\n    return x - 2;\n}"
        ]
    },
    {
        "description": "The program's function is to perform a simple multiplication. It is provided with two integer factors. It calculates their product and then returns the final integer result.",
        "verbosity": "high",
        "function_name": "simple_multiply",
        "c_implementation": "int simple_multiply(int factor1, int factor2) {\n    return factor1 * factor2;\n}",
        "c_corrupted_implementation": [
            "int simple_multiply(int factor1, int factor2) {\n    return factor1 - factor2;\n}",
            "int simple_multiply(int factor1, int factor2) {\n    return factor1 + factor2;\n}",
            "int simple_multiply(int factor1, int factor2) {\n    return factor1 ^ factor2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns the value at `p` plus 1.",
        "verbosity": "low",
        "function_name": "get_value_plus_one",
        "c_implementation": "int get_value_plus_one(int* p) {\n    return *p + 1;\n}",
        "c_corrupted_implementation": [
            "int get_value_plus_one(int* p) {\n    return *p - 1;\n}",
            "int get_value_plus_one(int* p) {\n    return p;\n}",
            "int get_value_plus_one(int* p) {\n    return -1;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and an integer `x`. It modifies the value pointed to by `p` by subtracting `x` from it.",
        "verbosity": "medium",
        "function_name": "subtract_from_pointed_value",
        "c_implementation": "void subtract_from_pointed_value(int* p, int x) {\n    *p = *p - x;\n}",
        "c_corrupted_implementation": [
            "void subtract_from_pointed_value(int* p, int x) {\n    *p = x;\n}",
            "void subtract_from_pointed_value(int* p, int x) {\n    *p = x + 1;\n}",
            "void subtract_from_pointed_value(int* p, int x) {\n    *p = x - p;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `(x << 3) - x`, which is a fast way to multiply by 7.",
        "verbosity": "low",
        "function_name": "multiply_by_seven_fast",
        "c_implementation": "int multiply_by_seven_fast(int x) {\n    return (x << 3) - x;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_seven_fast(int x) {\n    return (x << 3) + x;\n}",
            "int multiply_by_seven_fast(int x) {\n    return (x + 3) - x;\n}",
            "int multiply_by_seven_fast(int x) {\n    return (x - 3) / x;\n}"
        ]
    },
    {
        "description": "Computes the average of four integers, `a`, `b`, `c`, and `d`.",
        "verbosity": "low",
        "function_name": "average_of_four",
        "c_implementation": "int average_of_four(int a, int b, int c, int d) {\n    return (a + b + c + d) / 4;\n}",
        "c_corrupted_implementation": [
            "int average_of_four(int a, int b, int c, int d) {\n    return (a + b + c + d) * 4;\n}",
            "int average_of_four(int a, int b, int c, int d) {\n    return (a + b)/2 + (c + d)/2;\n}",
            "int average_of_four(int a, int b, int c, int d) {\n    return a - b + c * d + 4;\n}"
        ]
    },
    {
        "description": "This program takes three integers, `a`, `b`, and `c`. It returns the result of the expression `a + b - c`.",
        "verbosity": "medium",
        "function_name": "add_two_subtract_one",
        "c_implementation": "int add_two_subtract_one(int a, int b, int c) {\n    return a + b - c;\n}",
        "c_corrupted_implementation": [
            "int add_two_subtract_one(int a, int b, int c) {\n    return a - b + c;\n}",
            "int add_two_subtract_one(int a, int b, int c) {\n    return a - b - c;\n}",
            "int add_two_subtract_one(int a, int b, int c) {\n    return a + b + c;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, the function returns the value of the integer multiplied by 8.",
        "verbosity": "low",
        "function_name": "get_value_times_eight",
        "c_implementation": "int get_value_times_eight(int* p) {\n    return *p * 8;\n}",
        "c_corrupted_implementation": [
            "int get_value_times_eight(int* p) {\n    return *p / 8;\n}",
            "int get_value_times_eight(int* p) {\n    return *p + 5;\n}",
            "int get_value_times_eight(int* p) {\n    return *p * 2;\n}"
        ]
    },
    {
        "description": "Calculates `(x-y)*(x+y)` for two integers x and y.",
        "verbosity": "low",
        "function_name": "diff_of_squares_alt",
        "c_implementation": "int diff_of_squares_alt(int x, int y) {\n    return (x - y) * (x + y);\n}",
        "c_corrupted_implementation": [
            "int diff_of_squares_alt(int x, int y) {\n    return (x * x) + (y * y);\n}",
            "int diff_of_squares_alt(int x, int y) {\n    return (x / 2) + (y / 2);\n}",
            "int diff_of_squares_alt(int x, int y) {\n    return x * y;\n}"
        ]
    },
    {
        "description": "The program's role is to perform a bitwise OR operation. It accepts two integer values as its inputs. It then computes the OR between these two integers and returns the resulting integer value.",
        "verbosity": "high",
        "function_name": "detailed_bitwise_or",
        "c_implementation": "int detailed_bitwise_or(int a, int b) {\n    return a | b;\n}",
        "c_corrupted_implementation": [
            "int detailed_bitwise_or(int a, int b) {\n    return a ^ b;\n}",
            "int detailed_bitwise_or(int a, int b) {\n    return a / b;\n}",
            "int detailed_bitwise_or(int a, int b) {\n    return a & b;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns `x+1` if it's even, `x` if it's odd.",
        "verbosity": "medium",
        "function_name": "ceil_to_odd",
        "c_implementation": "int ceil_to_odd(int x) {\n    return x | 1;\n}",
        "c_corrupted_implementation": [
            "int ceil_to_odd(int x) {\n    return x & 1;\n}",
            "int ceil_to_odd(int x) {\n    return x / 3;\n}",
            "int ceil_to_odd(int x) {\n    return x * 2;\n}"
        ]
    },
    {
        "description": "Returns -1.",
        "verbosity": "low",
        "function_name": "return_minus_one",
        "c_implementation": "int return_minus_one() {\n    return -1;\n}",
        "c_corrupted_implementation": [
            "int return_minus_one() {\n    return 1;\n}",
            "int return_minus_one() {\n    return 2;\n}",
            "int return_minus_one() {\n    return 0;\n}"
        ]
    },
    {
        "description": "The function takes a pointer to an integer `p`. It retrieves the value at that address, calculates its remainder when divided by 5, and then returns the result.",
        "verbosity": "medium",
        "function_name": "get_value_mod_5",
        "c_implementation": "int get_value_mod_5(int* p) {\n    return *p % 5;\n}",
        "c_corrupted_implementation": [
            "int get_value_mod_5(int* p) {\n    return *p / 5;\n}",
            "int get_value_mod_5(int* p) {\n    return *p + 4;\n}",
            "int get_value_mod_5(int* p) {\n    return *p;\n}"
        ]
    },
    {
        "description": "Given an integer, returns 1 if it is zero and 0 if it is non-zero.",
        "verbosity": "low",
        "function_name": "is_zero",
        "c_implementation": "int is_zero(int n) {\n    return !n;\n}",
        "c_corrupted_implementation": [
            "int is_zero(int n) {\n    return !!n;\n}",
            "int is_zero(int n) {\n    return n;\n}",
            "int is_zero(int n) {\n    return !!n ^ 0;\n}"
        ]
    },
    {
        "description": "This program is designed to take a pointer to an integer, `p_num`, and an integer multiplier. It dereferences the pointer to get the value, multiplies that value by the provided multiplier, and then updates the value at the memory location `p_num` with the result of the multiplication.",
        "verbosity": "high",
        "function_name": "multiply_value_at_pointer_by",
        "c_implementation": "void multiply_value_at_pointer_by(int* p_num, int multiplier) {\n    *p_num = *p_num * multiplier;\n}",
        "c_corrupted_implementation": [
            "void multiply_value_at_pointer_by(int* p_num, int multiplier) {\n    *p_num = *p_num + multiplier;\n}",
            "void multiply_value_at_pointer_by(int* p_num, int multiplier) {\n    multiplier = *p_num;\n}",
            "void multiply_value_at_pointer_by(int* p_num, int multiplier) {\n    *p_num = multiplier;\n}"
        ]
    },
    {
        "description": "The program takes an integer value and a bit position `k`. It returns a new integer where the k-th bit of the original value is cleared to 0, leaving other bits unchanged.",
        "verbosity": "medium",
        "function_name": "clear_kth_bit",
        "c_implementation": "int clear_kth_bit(int n, int k) {\n    return n & ~(1 << k);\n}",
        "c_corrupted_implementation": [
            "int clear_kth_bit(int n, int k) {\n    return n | (1 << k);\n}",
            "int clear_kth_bit(int n, int k) {\n    return n * k;\n}",
            "int clear_kth_bit(int n, int k) {\n    return n - (1 / k);\n}"
        ]
    },
    {
        "description": "This function takes two integers, `a` and `b`. It returns the result of `a` right-shifted by `b` positions.",
        "verbosity": "low",
        "function_name": "shift_right_by_b",
        "c_implementation": "int shift_right_by_b(int a, int b) {\n    return a >> b;\n}",
        "c_corrupted_implementation": [
            "int shift_right_by_b(int a, int b) {\n    return a << b;\n}",
            "int shift_right_by_b(int a, int b) {\n    return a + b;\n}",
            "int shift_right_by_b(int a, int b) {\n    return a - b;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise AND operation. It accepts two integer values, a and b, as its inputs. The function then carries out the bitwise AND and returns the resulting integer.",
        "verbosity": "high",
        "function_name": "verbose_bitwise_and",
        "c_implementation": "int verbose_bitwise_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int verbose_bitwise_and(int a, int b) {\n    return a | b;\n}",
            "int verbose_bitwise_and(int a, int b) {\n    return a + b;\n}",
            "int verbose_bitwise_and(int a, int b) {\n    return a - 1 + b;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and returns the integer value it points to, divided by 2.",
        "verbosity": "medium",
        "function_name": "get_halved_pointed_value",
        "c_implementation": "int get_halved_pointed_value(int* p) {\n    return *p / 2;\n}",
        "c_corrupted_implementation": [
            "int get_halved_pointed_value(int* p) {\n    return *p * 2;\n}",
            "int get_halved_pointed_value(int* p) {\n    return *p;\n}",
            "int get_halved_pointed_value(int* p) {\n    return *p + 1;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer `p`, the function sets the value it points to, to 100.",
        "verbosity": "low",
        "function_name": "set_pointed_to_100",
        "c_implementation": "void set_pointed_to_100(int* p) {\n    *p = 100;\n}",
        "c_corrupted_implementation": [
            "void set_pointed_to_100(int* p) {\n    *p = -100;\n}",
            "void set_pointed_to_100(int* p) {\n    *p = 1;\n}",
            "void set_pointed_to_100(int* p) {\n    *p = -*p;\n}"
        ]
    },
    {
        "description": "This program is designed to take four integers, `w`, `x`, `y`, and `z`, and compute their product. It multiplies them sequentially and returns the final value.",
        "verbosity": "high",
        "function_name": "product_of_four_integers",
        "c_implementation": "int product_of_four_integers(int w, int x, int y, int z) {\n    return w * x * y * z;\n}",
        "c_corrupted_implementation": [
            "int product_of_four_integers(int w, int x, int y, int z) {\n    return w + x + y + z;\n}",
            "int product_of_four_integers(int w, int x, int y, int z) {\n    return w - x + y * z;\n}",
            "int product_of_four_integers(int w, int x, int y, int z) {\n    return w * x / y * z;\n}"
        ]
    },
    {
        "description": "Returns an integer's value divided by 16.",
        "verbosity": "low",
        "function_name": "divide_by_sixteen",
        "c_implementation": "int divide_by_sixteen(int n) {\n    return n / 16;\n}",
        "c_corrupted_implementation": [
            "int divide_by_sixteen(int n) {\n    return n % 16;\n}",
            "int divide_by_sixteen(int n) {\n    return n * 2;\n}",
            "int divide_by_sixteen(int n) {\n    return n ^ n;\n}"
        ]
    },
    {
        "description": "The program accepts a single integer value as its argument. Its function is to return the absolute value of the input integer. It does this without using any conditional branching, typically by employing bitwise manipulations to handle negative numbers.",
        "verbosity": "high",
        "function_name": "get_absolute_value_bitwise",
        "c_implementation": "int get_absolute_value_bitwise(int n) {\n    const int mask = n >> 31;\n    return (n + mask) ^ mask;\n}",
        "c_corrupted_implementation": [
            "int get_absolute_value_bitwise(int n) {\n    const int mask = n >> 31;\n    return (n + mask) & mask;\n}",
            "int get_absolute_value_bitwise(int n) {\n    const int mask = n >> 31;\n    return (n - mask) & mask;\n}",
            "int get_absolute_value_bitwise(int n) {\n    const int mask = n >> 31;\n    return (n + mask);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, this function returns `x - 1`.",
        "verbosity": "medium",
        "function_name": "decrement_integer",
        "c_implementation": "int decrement_integer(int x) {\n    return x - 1;\n}",
        "c_corrupted_implementation": [
            "int decrement_integer(int x) {\n    return x + 1;\n}",
            "int decrement_integer(int x) {\n    return x / 6;\n}",
            "int decrement_integer(int x) {\n    return x * x;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and an integer `val`. It adds `val` to the value at `p`.",
        "verbosity": "low",
        "function_name": "add_val_to_p",
        "c_implementation": "void add_val_to_p(int* p, int val) {\n    *p = *p + val;\n}",
        "c_corrupted_implementation": [
            "void add_val_to_p(int* p, int val) {\n    *p = val;\n}",
            "void add_val_to_p(int* p, int val) {\n    *p -= val;\n}",
            "void add_val_to_p(int* p, int val) {\n    *p = val + 1;\n}"
        ]
    },
    {
        "description": "Given five integers, returns their sum.",
        "verbosity": "low",
        "function_name": "sum_of_five",
        "c_implementation": "int sum_of_five(int a, int b, int c, int d, int e) {\n    return a + b + c + d + e;\n}",
        "c_corrupted_implementation": [
            "int sum_of_five(int a, int b, int c, int d, int e) {\n    return a + b + c + d - e;\n}",
            "int sum_of_five(int a, int b, int c, int d, int e) {\n    return a - b - c + d - e;\n}",
            "int sum_of_five(int a, int b, int c, int d, int e) {\n    return a + b * c * d - e;\n}"
        ]
    },
    {
        "description": "This function's purpose is to perform a bitwise XOR operation. It takes two integer values as input. It then compares the corresponding bits of the two integers and produces a new integer where a bit is set to 1 only if the corresponding bits in the input integers are different. This new integer is the return value.",
        "verbosity": "high",
        "function_name": "get_xor_result",
        "c_implementation": "int get_xor_result(int a, int b) {\n    return a ^ b;\n}",
        "c_corrupted_implementation": [
            "int get_xor_result(int a, int b) {\n    return a & b;\n}",
            "int get_xor_result(int a, int b) {\n    return a / b;\n}",
            "int get_xor_result(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "Returns the product of four integers.",
        "verbosity": "low",
        "function_name": "product_four_integers",
        "c_implementation": "int product_four_integers(int a, int b, int c, int d) {\n    return a * b * c * d;\n}",
        "c_corrupted_implementation": [
            "int product_four_integers(int a, int b, int c, int d) {\n    return a * b * c + d;\n}",
            "int product_four_integers(int a, int b, int c, int d) {\n    return a * b - c + d;\n}",
            "int product_four_integers(int a, int b, int c, int d) {\n    return a * b - c - d;\n}"
        ]
    },
    {
        "description": "This function takes an integer `x` and returns `(x - 5) * 2`.",
        "verbosity": "medium",
        "function_name": "subtract_5_and_double",
        "c_implementation": "int subtract_5_and_double(int x) {\n    return (x - 5) * 2;\n}",
        "c_corrupted_implementation": [
            "int subtract_5_and_double(int x) {\n    return x - (5 * 2);\n}",
            "int subtract_5_and_double(int x) {\n    return x / (5 / 2);\n}",
            "int subtract_5_and_double(int x) {\n    return x + (5 - 2);\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, returns `(x & y) ^ y`.",
        "verbosity": "low",
        "function_name": "bitwise_and_xor",
        "c_implementation": "int bitwise_and_xor(int x, int y) {\n    return (x & y) ^ y;\n}",
        "c_corrupted_implementation": [
            "int bitwise_and_xor(int x, int y) {\n    return (x ^ y) & y;\n}",
            "int bitwise_and_xor(int x, int y) {\n    return (x / y) * y;\n}",
            "int bitwise_and_xor(int x, int y) {\n    return (x * y) / y;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and returns the value at the address `p` points to.",
        "verbosity": "medium",
        "function_name": "get_value_from_p",
        "c_implementation": "int get_value_from_p(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_from_p(int* p) {\n    return (int)p;\n}",
            "int get_value_from_p(int* p) {\n    return NULL;\n}",
            "int get_value_from_p(int* p) {\n    return p;\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns a pointer to it.",
        "verbosity": "low",
        "function_name": "pointer_to",
        "c_implementation": "int* pointer_to(int* x) {\n    return x;\n}",
        "c_corrupted_implementation": [
            "int* pointer_to(int* x) {\n    return x-1;\n}",
            "int* pointer_to(int* x) {\n    return x % 2;\n}",
            "int* pointer_to(int* x) {\n    return x & 2;\n}"
        ]
    },
    {
        "description": "The function's objective is to perform a bitwise left shift. It accepts an integer to be shifted and an integer representing the number of positions to shift. It shifts the bits of the first integer to the left by the specified number of positions and returns the modified integer.",
        "verbosity": "high",
        "function_name": "detailed_left_shift",
        "c_implementation": "int detailed_left_shift(int num, int shift_amount) {\n    return num << shift_amount;\n}",
        "c_corrupted_implementation": [
            "int detailed_left_shift(int num, int shift_amount) {\n    return num >> shift_amount;\n}",
            "int detailed_left_shift(int num, int shift_amount) {\n    return num + shift_amount;\n}",
            "int detailed_left_shift(int num, int shift_amount) {\n    return num - shift_amount + 1;\n}"
        ]
    },
    {
        "description": "Calculates `(a*b) - (c+d)` for four integers.",
        "verbosity": "low",
        "function_name": "product_minus_sum",
        "c_implementation": "int product_minus_sum(int a, int b, int c, int d) {\n    return (a * b) - (c + d);\n}",
        "c_corrupted_implementation": [
            "int product_minus_sum(int a, int b, int c, int d) {\n    return (a - b) * (c - d);\n}",
            "int product_minus_sum(int a, int b, int c, int d) {\n    return (a + b) / (c - d);\n}",
            "int product_minus_sum(int a, int b, int c, int d) {\n    return (a - b) + (c * d);\n}"
        ]
    },
    {
        "description": "This program takes a single integer `n` and returns `n` multiplied by 100.",
        "verbosity": "medium",
        "function_name": "multiply_by_100",
        "c_implementation": "int multiply_by_100(int n) {\n    return n * 100;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_100(int n) {\n    return n + 100;\n}",
            "int multiply_by_100(int n) {\n    return n + 0;\n}",
            "int multiply_by_100(int n) {\n    return *n + 10;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, this function returns `*p - *p`.",
        "verbosity": "low",
        "function_name": "subtract_from_self",
        "c_implementation": "int subtract_from_self(int* p) {\n    return *p - *p;\n}",
        "c_corrupted_implementation": [
            "int subtract_from_self(int* p) {\n    return *p + *p;\n}",
            "int subtract_from_self(int* p) {\n    return *p * *p;\n}",
            "int subtract_from_self(int* p) {\n    return 2 * *p;\n}"
        ]
    },
    {
        "description": "This function takes two integers, `a` and `b`, and returns their product.",
        "verbosity": "medium",
        "function_name": "get_product_of_two",
        "c_implementation": "int get_product_of_two(int a, int b) {\n    return a * b;\n}",
        "c_corrupted_implementation": [
            "int get_product_of_two(int a, int b) {\n    return a - b;\n}",
            "int get_product_of_two(int a, int b) {\n    return a + b;\n}",
            "int get_product_of_two(int a, int b) {\n    return a / b;\n}"
        ]
    },
    {
        "description": "Returns the difference of two integers `x` and `y`.",
        "verbosity": "low",
        "function_name": "diff_x_y",
        "c_implementation": "int diff_x_y(int x, int y) {\n    return x - y;\n}",
        "c_corrupted_implementation": [
            "int diff_x_y(int x, int y) {\n    return y - x;\n}",
            "int diff_x_y(int x, int y) {\n    return y / x;\n}",
            "int diff_x_y(int x, int y) {\n    return y % x;\n}"
        ]
    },
    {
        "description": "The function's purpose is to perform a bitwise complement operation. It accepts one integer value as its argument. It then inverts every bit of the integer, changing all 1s to 0s and all 0s to 1s. This new integer is then returned as the output.",
        "verbosity": "high",
        "function_name": "invert_bits",
        "c_implementation": "int invert_bits(int n) {\n    return ~n;\n}",
        "c_corrupted_implementation": [
            "int invert_bits(int n) {\n    return -n;\n}",
            "int invert_bits(int n) {\n    return n + 1;\n}",
            "int invert_bits(int n) {\n    return n - 2;\n}"
        ]
    },
    {
        "description": "Given a pointer to an integer `p`, the program increments the value it points to by 10.",
        "verbosity": "medium",
        "function_name": "add_10_to_pointer_val",
        "c_implementation": "void add_10_to_pointer_val(int* p) {\n    *p += 10;\n}",
        "c_corrupted_implementation": [
            "void add_10_to_pointer_val(int* p) {\n    *p *= 10;\n}",
            "void add_10_to_pointer_val(int* p) {\n    *p *= *p + 1;\n}",
            "void add_10_to_pointer_val(int* p) {\n    *p -= p;\n}"
        ]
    },
    {
        "description": "Calculates `a + b + c + d` for four integers.",
        "verbosity": "low",
        "function_name": "sum_four",
        "c_implementation": "int sum_four(int a, int b, int c, int d) {\n    return a + b + c + d;\n}",
        "c_corrupted_implementation": [
            "int sum_four(int a, int b, int c, int d) {\n    return a + b - c + d;\n}",
            "int sum_four(int a, int b, int c, int d) {\n    return a / (b + c) - d;\n}",
            "int sum_four(int a, int b, int c, int d) {\n    return a - b + c * d;\n}"
        ]
    },
    {
        "description": "The program takes an integer `n` and returns 1 if `n` is odd, and 0 otherwise. This is achieved using the bitwise AND trick with 1.",
        "verbosity": "medium",
        "function_name": "check_if_odd",
        "c_implementation": "int check_if_odd(int n) {\n    return n & 1;\n}",
        "c_corrupted_implementation": [
            "int check_if_odd(int n) {\n    return !(n & 1);\n}",
            "int check_if_odd(int n) {\n    return 0;\n}",
            "int check_if_odd(int n) {\n    return n;\n}"
        ]
    },
    {
        "description": "Given an integer, returns its negative.",
        "verbosity": "low",
        "function_name": "get_negative_val",
        "c_implementation": "int get_negative_val(int x) {\n    return -x;\n}",
        "c_corrupted_implementation": [
            "int get_negative_val(int x) {\n    return ~x;\n}",
            "int get_negative_val(int x) {\n    return x;\n}",
            "int get_negative_val(int x) {\n    return x + 1;\n}"
        ]
    },
    {
        "description": "This program takes a single integer `n` and returns `n` minus 5.",
        "verbosity": "medium",
        "function_name": "subtract_five",
        "c_implementation": "int subtract_five(int n) {\n    return n - 5;\n}",
        "c_corrupted_implementation": [
            "int subtract_five(int n) {\n    return 5 - n;\n}",
            "int subtract_five(int n) {\n    return n * 2;\n}",
            "int subtract_five(int n) {\n    return n / n;\n}"
        ]
    },
    {
        "description": "This program takes a pointer to an integer `p` and an integer `x`. It returns the difference between the value at `p` and `x`.",
        "verbosity": "medium",
        "function_name": "diff_pointer_and_int",
        "c_implementation": "int diff_pointer_and_int(int* p, int x) {\n    return *p - x;\n}",
        "c_corrupted_implementation": [
            "int diff_pointer_and_int(int* p, int x) {\n    return x - *p;\n}",
            "int diff_pointer_and_int(int* p, int x) {\n    return *p;\n}",
            "int diff_pointer_and_int(int* p, int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `(*p / 2) * 2`.",
        "verbosity": "low",
        "function_name": "clear_last_bit_of_pointed",
        "c_implementation": "int clear_last_bit_of_pointed(int* p) {\n    return (*p / 2) * 2;\n}",
        "c_corrupted_implementation": [
            "int clear_last_bit_of_pointed(int* p) {\n    return (*p >> 1) + *p;\n}",
            "int clear_last_bit_of_pointed(int* p) {\n    return (*p << 1) * *p;\n}",
            "int clear_last_bit_of_pointed(int* p) {\n    return (*p + 1) - *p;\n}"
        ]
    },
    {
        "description": "Takes an integer `x` and returns `x / 32`.",
        "verbosity": "low",
        "function_name": "divide_by_32",
        "c_implementation": "int divide_by_32(int x) {\n    return x / 32;\n}",
        "c_corrupted_implementation": [
            "int divide_by_32(int x) {\n    return x << 5;\n}",
            "int divide_by_32(int x) {\n    return x + 12;\n}",
            "int divide_by_32(int x) {\n    return x;\n}"
        ]
    },
    {
        "description": "This program's role is to perform a bitwise OR operation. It is given two integer values. The program compares the bits of the two integers and returns a new integer where a bit is 1 if the corresponding bit in either or both of the input integers was 1.",
        "verbosity": "high",
        "function_name": "verbose_bitwise_or",
        "c_implementation": "int verbose_bitwise_or(int a, int b) {\n    return a | b;\n}",
        "c_corrupted_implementation": [
            "int verbose_bitwise_or(int a, int b) {\n    return a & b;\n}",
            "int verbose_bitwise_or(int a, int b) {\n    return a + b - a;\n}",
            "int verbose_bitwise_or(int a, int b) {\n    return a + 1 / b;\n}"
        ]
    },
    {
        "description": "Given two integers `x` and `y`, returns `x / y`.",
        "verbosity": "medium",
        "function_name": "get_division",
        "c_implementation": "int get_division(int x, int y) {\n    return x / y;\n}",
        "c_corrupted_implementation": [
            "int get_division(int x, int y) {\n    return y / x;\n}",
            "int get_division(int x, int y) {\n    return y + x;\n}",
            "int get_division(int x, int y) {\n    return y * y * x;\n}"
        ]
    },
    {
        "description": "Takes a pointer `p` and returns the value at the address `p`.",
        "verbosity": "low",
        "function_name": "get_val_at_p",
        "c_implementation": "int get_val_at_p(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_val_at_p(int* p) {\n    return (int)p;\n}",
            "int get_val_at_p(int* p) {\n    return 0;\n}",
            "int get_val_at_p(int* p) {\n    return -*p - 1;\n}"
        ]
    },
    {
        "description": "This program takes four integers `a, b, c, d` and computes `(a-b) * (c-d)`.",
        "verbosity": "medium",
        "function_name": "product_of_differences",
        "c_implementation": "int product_of_differences(int a, int b, int c, int d) {\n    return (a - b) * (c - d);\n}",
        "c_corrupted_implementation": [
            "int product_of_differences(int a, int b, int c, int d) {\n    return (a * b) - (c * d);\n}",
            "int product_of_differences(int a, int b, int c, int d) {\n    return (a * b) / (c / d);\n}",
            "int product_of_differences(int a, int b, int c, int d) {\n    return (a / b) + (c * d);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x` if `x` is zero, `1` otherwise.",
        "verbosity": "low",
        "function_name": "is_not_zero",
        "c_implementation": "int is_not_zero(int x) {\n    return !!x;\n}",
        "c_corrupted_implementation": [
            "int is_not_zero(int x) {\n    return !x;\n}",
            "int is_not_zero(int x) {\n    return ~x;\n}",
            "int is_not_zero(int x) {\n    return -x + 1;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns its address.",
        "verbosity": "low",
        "function_name": "get_p_address",
        "c_implementation": "int* get_p_address(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* get_p_address(int* p) {\n    return p+1;\n}",
            "int* get_p_address(int* p) {\n    return -p;\n}",
            "int* get_p_address(int* p) {\n    return p * p;\n}"
        ]
    },
    {
        "description": "The function is designed to take a pointer to an integer, `p_val`, and a divisor. It retrieves the value from the memory location `p_val` points to, performs an integer division with the divisor, and returns the resulting quotient.",
        "verbosity": "high",
        "function_name": "get_quotient_from_pointer",
        "c_implementation": "int get_quotient_from_pointer(int* p_val, int divisor) {\n    return *p_val / divisor;\n}",
        "c_corrupted_implementation": [
            "int get_quotient_from_pointer(int* p_val, int divisor) {\n    return *p_val % divisor;\n}",
            "int get_quotient_from_pointer(int* p_val, int divisor) {\n    return *p_val * divisor;\n}",
            "int get_quotient_from_pointer(int* p_val, int divisor) {\n    return *p_val + divisor;\n}"
        ]
    },
    {
        "description": "Given two integers, `x` and `y`, returns `x | y`.",
        "verbosity": "medium",
        "function_name": "calculate_bitwise_or",
        "c_implementation": "int calculate_bitwise_or(int x, int y) {\n    return x | y;\n}",
        "c_corrupted_implementation": [
            "int calculate_bitwise_or(int x, int y) {\n    return x & y;\n}",
            "int calculate_bitwise_or(int x, int y) {\n    return x + 1 - y;\n}",
            "int calculate_bitwise_or(int x, int y) {\n    return x * x + y;\n}"
        ]
    },
    {
        "description": "This program takes three integers `a, b, c` and returns `a * b - c`.",
        "verbosity": "medium",
        "function_name": "mult_and_sub",
        "c_implementation": "int mult_and_sub(int a, int b, int c) {\n    return a * b - c;\n}",
        "c_corrupted_implementation": [
            "int mult_and_sub(int a, int b, int c) {\n    return a * (b - c);\n}",
            "int mult_and_sub(int a, int b, int c) {\n    return a / (b + c);\n}",
            "int mult_and_sub(int a, int b, int c) {\n    return a & (b - c);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x * 16`.",
        "verbosity": "low",
        "function_name": "mult_by_16",
        "c_implementation": "int mult_by_16(int x) {\n    return x * 16;\n}",
        "c_corrupted_implementation": [
            "int mult_by_16(int x) {\n    return x / 16;\n}",
            "int mult_by_16(int x) {\n    return x + 1;\n}",
            "int mult_by_16(int x) {\n    return x & 6;\n}"
        ]
    },
    {
        "description": "The program accepts a single pointer to an integer. Its purpose is to return the same pointer, unchanged. It effectively acts as an identity function for a pointer.",
        "verbosity": "high",
        "function_name": "pointer_identity",
        "c_implementation": "int* pointer_identity(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* pointer_identity(int* p) {\n    return p - 1;\n}",
            "int* pointer_identity(int* p) {\n    return *p;\n}",
            "int* pointer_identity(int* p) {\n    return *p / 2;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns the result of `*p * 4`.",
        "verbosity": "medium",
        "function_name": "quadruple_pointed_value",
        "c_implementation": "int quadruple_pointed_value(int* p) {\n    return *p * 4;\n}",
        "c_corrupted_implementation": [
            "int quadruple_pointed_value(int* p) {\n    return *p + 4;\n}",
            "int quadruple_pointed_value(int* p) {\n    return *p - 3;\n}",
            "int quadruple_pointed_value(int* p) {\n    return *p / 2;\n}"
        ]
    },
    {
        "description": "Given `x`, returns `x` multiplied by 9.",
        "verbosity": "low",
        "function_name": "multiply_by_9",
        "c_implementation": "int multiply_by_9(int x) {\n    return x * 9;\n}",
        "c_corrupted_implementation": [
            "int multiply_by_9(int x) {\n    return x + 9;\n}",
            "int multiply_by_9(int x) {\n    return x + 5;\n}",
            "int multiply_by_9(int x) {\n    return x - 3;\n}"
        ]
    },
    {
        "description": "This program takes two integer pointers, `p1` and `p2`, and returns the difference of the values they point to.",
        "verbosity": "medium",
        "function_name": "get_difference_from_pointers",
        "c_implementation": "int get_difference_from_pointers(int* p1, int* p2) {\n    return *p1 - *p2;\n}",
        "c_corrupted_implementation": [
            "int get_difference_from_pointers(int* p1, int* p2) {\n    return *p2 - *p1;\n}",
            "int get_difference_from_pointers(int* p1, int* p2) {\n    return *p2 + *p1;\n}",
            "int get_difference_from_pointers(int* p1, int* p2) {\n    return *p2 * *p2;\n}"
        ]
    },
    {
        "description": "Given a pointer `p` to an integer, returns `*p >> 2`.",
        "verbosity": "low",
        "function_name": "get_val_rshift_2",
        "c_implementation": "int get_val_rshift_2(int* p) {\n    return *p >> 2;\n}",
        "c_corrupted_implementation": [
            "int get_val_rshift_2(int* p) {\n    return *p << 2;\n}",
            "int get_val_rshift_2(int* p) {\n    return *p - 2;\n}",
            "int get_val_rshift_2(int* p) {\n    return *p + 2;\n}"
        ]
    },
    {
        "description": "This function takes two integers `x` and `y` and returns their sum.",
        "verbosity": "medium",
        "function_name": "sum_two_values",
        "c_implementation": "int sum_two_values(int x, int y) {\n    return x + y;\n}",
        "c_corrupted_implementation": [
            "int sum_two_values(int x, int y) {\n    return x - y;\n}",
            "int sum_two_values(int x, int y) {\n    return x / y;\n}",
            "int sum_two_values(int x, int y) {\n    return x * y;\n}"
        ]
    },
    {
        "description": "Returns the bitwise AND of `a` and `b`.",
        "verbosity": "low",
        "function_name": "get_and",
        "c_implementation": "int get_and(int a, int b) {\n    return a & b;\n}",
        "c_corrupted_implementation": [
            "int get_and(int a, int b) {\n    return a | b;\n}",
            "int get_and(int a, int b) {\n    return a ^ b;\n}",
            "int get_and(int a, int b) {\n    return a * b;\n}"
        ]
    },
    {
        "description": "The function's purpose is to take a pointer to an integer, `p_num`, and an integer `subtrahend`. It retrieves the value stored at the memory location `p_num` points to, subtracts the `subtrahend` from this value, and then stores the new difference back into the memory location `p_num`.",
        "verbosity": "high",
        "function_name": "subtract_from_value_at_pointer",
        "c_implementation": "void subtract_from_value_at_pointer(int* p_num, int subtrahend) {\n    *p_num = *p_num - subtrahend;\n}",
        "c_corrupted_implementation": [
            "void subtract_from_value_at_pointer(int* p_num, int subtrahend) {\n    *p_num = subtrahend - *p_num;\n}",
            "void subtract_from_value_at_pointer(int* p_num, int subtrahend) {\n    *p_num = *p_num;\n}",
            "void subtract_from_value_at_pointer(int* p_num, int subtrahend) {\n    *p_num = subtrahend;\n}"
        ]
    },
    {
        "description": "This function takes a pointer to an integer `p` and returns the address of the integer it points to, which is simply the value of `p` itself.",
        "verbosity": "medium",
        "function_name": "return_pointer_address",
        "c_implementation": "int* return_pointer_address(int* p) {\n    return p;\n}",
        "c_corrupted_implementation": [
            "int* return_pointer_address(int* p) {\n    return p - 1;\n}",
            "int* return_pointer_address(int* p) {\n    return *p + 1;\n}",
            "int* return_pointer_address(int* p) {\n    return NULL;\n}"
        ]
    },
    {
        "description": "This program takes three integers `a, b, c` and returns `(a + c) * (b + c)`.",
        "verbosity": "medium",
        "function_name": "sum_with_c_and_multiply",
        "c_implementation": "int sum_with_c_and_multiply(int a, int b, int c) {\n    return (a + c) * (b + c);\n}",
        "c_corrupted_implementation": [
            "int sum_with_c_and_multiply(int a, int b, int c) {\n    return (a * c) + (b * c);\n}",
            "int sum_with_c_and_multiply(int a, int b, int c) {\n    return (a - c) + (b * c);\n}",
            "int sum_with_c_and_multiply(int a, int b, int c) {\n    return (a / c) + (b / c);\n}"
        ]
    },
    {
        "description": "Given an integer `x`, returns `x` AND `x`.",
        "verbosity": "low",
        "function_name": "and_with_self",
        "c_implementation": "int and_with_self(int x) {\n    return x & x;\n}",
        "c_corrupted_implementation": [
            "int and_with_self(int x) {\n    return x ^ x;\n}",
            "int and_with_self(int x) {\n    return x / x;\n}",
            "int and_with_self(int x) {\n    return x + 1;\n}"
        ]
    },
    {
        "description": "The program takes a single integer `n` and returns `n` multiplied by 2.",
        "verbosity": "medium",
        "function_name": "double_integer",
        "c_implementation": "int double_integer(int n) {\n    return n * 2;\n}",
        "c_corrupted_implementation": [
            "int double_integer(int n) {\n    return n + 2;\n}",
            "int double_integer(int n) {\n    return n * n;\n}",
            "int double_integer(int n) {\n    return n - n;\n}"
        ]
    },
    {
        "description": "Returns `(x*x) + x` for an integer `x`.",
        "verbosity": "low",
        "function_name": "square_plus_x",
        "c_implementation": "int square_plus_x(int x) {\n    return (x * x) + x;\n}",
        "c_corrupted_implementation": [
            "int square_plus_x(int x) {\n    return (x + 1) * x;\n}",
            "int square_plus_x(int x) {\n    return x;\n}",
            "int square_plus_x(int x) {\n    return x / 1;\n}"
        ]
    },
    {
        "description": "This function's purpose is to get a value from a memory location specified by a pointer. It accepts a single argument, a pointer to an integer. It then returns the integer value stored at that memory address.",
        "verbosity": "high",
        "function_name": "get_value_from_memory",
        "c_implementation": "int get_value_from_memory(int* p) {\n    return *p;\n}",
        "c_corrupted_implementation": [
            "int get_value_from_memory(int* p) {\n    return (int)p;\n}",
            "int get_value_from_memory(int* p) {\n    return 0;\n}",
            "int get_value_from_memory(int* p) {\n    return -1 + p;\n}"
        ]
    },
    {
        "description": "Given a pointer `p`, returns `*p - 5`.",
        "verbosity": "low",
        "function_name": "get_val_minus_5",
        "c_implementation": "int get_val_minus_5(int* p) {\n    return *p - 5;\n}",
        "c_corrupted_implementation": [
            "int get_val_minus_5(int* p) {\n    return 5 - *p;\n}",
            "int get_val_minus_5(int* p) {\n    return p;\n}",
            "int get_val_minus_5(int* p) {\n    return *p + 1;\n}"
        ]
    },
    {
        "description": "This program takes two integers `x` and `y` and returns their difference.",
        "verbosity": "medium",
        "function_name": "subtract_integers",
        "c_implementation": "int subtract_integers(int x, int y) {\n    return x - y;\n}",
        "c_corrupted_implementation": [
            "int subtract_integers(int x, int y) {\n    return y - x;\n}",
            "int subtract_integers(int x, int y) {\n    return x / (x + y);\n}",
            "int subtract_integers(int x, int y) {\n    return y / (x + y);\n}"
        ]
    }
]